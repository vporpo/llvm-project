; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 %s -S | FileCheck %s --check-prefix=SCALAR

define void @unpack(ptr noalias %ptr, float %val, ptr %ptrX, ptr %ptrY) {
;
; VECTOR-LABEL: define void @unpack(
; VECTOR-SAME: ptr noalias [[PTR:%.*]], float [[VAL:%.*]], ptr [[PTRX:%.*]], ptr [[PTRY:%.*]]) {
; VECTOR-NEXT:  bb:
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[VECL:%.*]] = load <2 x float>, ptr [[PTR0]], align 4
; VECTOR-NEXT:    [[UNPACK1:%.*]] = extractelement <2 x float> [[VECL]], i64 1
; VECTOR-NEXT:    [[UNPACK:%.*]] = extractelement <2 x float> [[VECL]], i64 0
; VECTOR-NEXT:    store <2 x float> [[VECL]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    store float [[UNPACK]], ptr [[PTRX]], align 4
; VECTOR-NEXT:    store float [[UNPACK1]], ptr [[PTRY]], align 4
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @unpack(
; SCALAR-SAME: ptr noalias [[PTR:%.*]], float [[VAL:%.*]], ptr [[PTRX:%.*]], ptr [[PTRY:%.*]]) {
; SCALAR-NEXT:  bb:
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[LD0:%.*]] = load float, ptr [[PTR0]], align 4
; SCALAR-NEXT:    [[LD1:%.*]] = load float, ptr [[PTR1]], align 4
; SCALAR-NEXT:    store float [[LD0]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[LD1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    store float [[LD0]], ptr [[PTRX]], align 4
; SCALAR-NEXT:    store float [[LD1]], ptr [[PTRY]], align 4
; SCALAR-NEXT:    ret void
;
bb:
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1
  %ld0 = load float, ptr %ptr0
  %ld1 = load float, ptr %ptr1
  store float %ld0, ptr %ptr0
  store float %ld1, ptr %ptr1

  store float %ld0, ptr %ptrX
  store float %ld1, ptr %ptrY
  ret void
}
