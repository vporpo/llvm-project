; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 %s -S | FileCheck %s --check-prefix=SCALAR

define void @non_debug_metadata(ptr %ptr) {
; VECTOR-LABEL: define void @non_debug_metadata(
; VECTOR-SAME: ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[VECL:%.*]] = load <2 x float>, ptr [[PTR0]], align 4, !fpmath [[META0:![0-9]+]], !sb [[META1:![0-9]+]]
; VECTOR-NEXT:    store <2 x float> [[VECL]], ptr [[PTR0]], align 4, !sb [[META1]]
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @non_debug_metadata(
; SCALAR-SAME: ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[LD0:%.*]] = load float, ptr [[PTR0]], align 4, !fpmath [[META0:![0-9]+]]
; SCALAR-NEXT:    [[LD1:%.*]] = load float, ptr [[PTR1]], align 4, !fpmath [[META1:![0-9]+]]
; SCALAR-NEXT:    store float [[LD0]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[LD1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1
  %ld0 = load float, ptr %ptr0, !fpmath !0
  %ld1 = load float, ptr %ptr1, !fpmath !1
  store float %ld0, ptr %ptr0, !sb !2
  store float %ld1, ptr %ptr1
  ret void
}
!0 = !{ float 42.0 }
!1 = !{ float 43.0 }
!2 = !{!"region", i32 0}
;.
; VECTOR: [[META0]] = !{float 4.200000e+01}
; VECTOR: [[META1]] = !{!"region", i32 0}
;.
; SCALAR: [[META0]] = !{float 4.200000e+01}
; SCALAR: [[META1]] = !{float 4.300000e+01}
;.
