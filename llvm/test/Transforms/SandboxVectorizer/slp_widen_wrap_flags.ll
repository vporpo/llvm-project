; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR

; TODO: For now we don't vectorize when wrap flags are different.
; The best solution is to use the common flags or none.

define void @slp_widen_wrap_flags_trunc(ptr %ptr, i64 %v0, i64 %v1) {
; VECTOR-LABEL: define void @slp_widen_wrap_flags_trunc(
; VECTOR-SAME: ptr [[PTR:%.*]], i64 [[V0:%.*]], i64 [[V1:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr i32, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[ADD0:%.*]] = trunc nuw nsw i64 [[V0]] to i32
; VECTOR-NEXT:    [[ADD1:%.*]] = trunc nsw i64 [[V1]] to i32
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <2 x i32> poison, i32 [[ADD0]], i64 0
; VECTOR-NEXT:    [[PACK1:%.*]] = insertelement <2 x i32> [[PACK]], i32 [[ADD1]], i64 1, !sb [[META0:![0-9]+]]
; VECTOR-NEXT:    store <2 x i32> [[PACK1]], ptr [[PTR0]], align 4, !sb [[META0]]
; VECTOR-NEXT:    ret void
;
  %ptr0 = getelementptr i32, ptr %ptr, i32 0
  %ptr1 = getelementptr i32, ptr %ptr, i32 1
  %add0 = trunc nuw nsw i64 %v0 to i32
  %add1 = trunc nsw i64 %v1 to i32
  store i32 %add0, ptr %ptr0
  store i32 %add1, ptr %ptr1
  ret void
}


define void @slp_widen_wrap_flags_binop0(ptr %ptr, i32 %v0, i32 %v1) {
; VECTOR-LABEL: define void @slp_widen_wrap_flags_binop0(
; VECTOR-SAME: ptr [[PTR:%.*]], i32 [[V0:%.*]], i32 [[V1:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr i32, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[ADD0:%.*]] = add nuw nsw i32 [[V0]], [[V0]]
; VECTOR-NEXT:    [[ADD1:%.*]] = add nsw i32 [[V1]], [[V1]]
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <2 x i32> poison, i32 [[ADD0]], i64 0
; VECTOR-NEXT:    [[PACK1:%.*]] = insertelement <2 x i32> [[PACK]], i32 [[ADD1]], i64 1, !sb [[META1:![0-9]+]]
; VECTOR-NEXT:    store <2 x i32> [[PACK1]], ptr [[PTR0]], align 4, !sb [[META1]]
; VECTOR-NEXT:    ret void
;
  %ptr0 = getelementptr i32, ptr %ptr, i32 0
  %ptr1 = getelementptr i32, ptr %ptr, i32 1
  %add0 = add nuw nsw i32 %v0, %v0
  %add1 = add nsw i32 %v1, %v1
  store i32 %add0, ptr %ptr0
  store i32 %add1, ptr %ptr1
  ret void
}

define void @slp_widen_wrap_flags_binop1(ptr %ptr, i32 %v0, i32 %v1) {
; VECTOR-LABEL: define void @slp_widen_wrap_flags_binop1(
; VECTOR-SAME: ptr [[PTR:%.*]], i32 [[V0:%.*]], i32 [[V1:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr i32, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[ADD0:%.*]] = add nuw i32 [[V0]], [[V0]]
; VECTOR-NEXT:    [[ADD1:%.*]] = add nsw i32 [[V1]], [[V1]]
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <2 x i32> poison, i32 [[ADD0]], i64 0
; VECTOR-NEXT:    [[PACK1:%.*]] = insertelement <2 x i32> [[PACK]], i32 [[ADD1]], i64 1, !sb [[META2:![0-9]+]]
; VECTOR-NEXT:    store <2 x i32> [[PACK1]], ptr [[PTR0]], align 4, !sb [[META2]]
; VECTOR-NEXT:    ret void
;
  %ptr0 = getelementptr i32, ptr %ptr, i32 0
  %ptr1 = getelementptr i32, ptr %ptr, i32 1
  %add0 = add nuw i32 %v0, %v0
  %add1 = add nsw i32 %v1, %v1
  store i32 %add0, ptr %ptr0
  store i32 %add1, ptr %ptr1
  ret void
}

define void @slp_widen_wrap_flags_binop2(ptr %ptr, i32 %v0, i32 %v1) {
; VECTOR-LABEL: define void @slp_widen_wrap_flags_binop2(
; VECTOR-SAME: ptr [[PTR:%.*]], i32 [[V0:%.*]], i32 [[V1:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr i32, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[ADD0:%.*]] = add nuw i32 [[V0]], [[V0]]
; VECTOR-NEXT:    [[ADD1:%.*]] = add i32 [[V1]], [[V1]]
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <2 x i32> poison, i32 [[ADD0]], i64 0
; VECTOR-NEXT:    [[PACK1:%.*]] = insertelement <2 x i32> [[PACK]], i32 [[ADD1]], i64 1, !sb [[META3:![0-9]+]]
; VECTOR-NEXT:    store <2 x i32> [[PACK1]], ptr [[PTR0]], align 4, !sb [[META3]]
; VECTOR-NEXT:    ret void
;
  %ptr0 = getelementptr i32, ptr %ptr, i32 0
  %ptr1 = getelementptr i32, ptr %ptr, i32 1
  %add0 = add nuw i32 %v0, %v0
  %add1 = add i32 %v1, %v1
  store i32 %add0, ptr %ptr0
  store i32 %add1, ptr %ptr1
  ret void
}
;.
; VECTOR: [[META0]] = !{!"region", i32 0}
; VECTOR: [[META1]] = !{!"region", i32 1}
; VECTOR: [[META2]] = !{!"region", i32 2}
; VECTOR: [[META3]] = !{!"region", i32 3}
;.
