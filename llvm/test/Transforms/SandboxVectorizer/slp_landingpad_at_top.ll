; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 %s -S | FileCheck %s --check-prefix=SCALAR
declare void @foo()
declare void @bar()
define void @landingpad_at_top(ptr %ptr, i32 %v0, i32 %v1) personality ptr @foo {
; VECTOR-LABEL: define void @landingpad_at_top(
; VECTOR-SAME: ptr [[PTR:%.*]], i32 [[V0:%.*]], i32 [[V1:%.*]]) personality ptr @foo {
; VECTOR-NEXT:  entry:
; VECTOR-NEXT:    invoke void @bar(ptr [[PTR]])
; VECTOR-NEXT:            to label [[LABEL:%.*]] unwind label [[LPAD:%.*]]
; VECTOR:       0:
; VECTOR-NEXT:    ret void
; VECTOR:       label:
; VECTOR-NEXT:    ret void
; VECTOR:       lpad:
; VECTOR-NEXT:    [[PAD:%.*]] = landingpad { ptr, i32 }
; VECTOR-NEXT:            catch ptr null
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <2 x i32> poison, i32 [[V0]], i64 0
; VECTOR-NEXT:    [[PACK1:%.*]] = insertelement <2 x i32> [[PACK]], i32 [[V1]], i64 1
; VECTOR-NEXT:    [[GEP0:%.*]] = getelementptr i32, ptr [[PTR]], i64 0
; VECTOR-NEXT:    store <2 x i32> [[PACK1]], ptr [[GEP0]], align 4
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @landingpad_at_top(
; SCALAR-SAME: ptr [[PTR:%.*]], i32 [[V0:%.*]], i32 [[V1:%.*]]) personality ptr @foo {
; SCALAR-NEXT:  entry:
; SCALAR-NEXT:    invoke void @bar(ptr [[PTR]])
; SCALAR-NEXT:            to label [[LABEL:%.*]] unwind label [[LPAD:%.*]]
; SCALAR:       0:
; SCALAR-NEXT:    ret void
; SCALAR:       label:
; SCALAR-NEXT:    ret void
; SCALAR:       lpad:
; SCALAR-NEXT:    [[PAD:%.*]] = landingpad { ptr, i32 }
; SCALAR-NEXT:            catch ptr null
; SCALAR-NEXT:    [[GEP0:%.*]] = getelementptr i32, ptr [[PTR]], i64 0
; SCALAR-NEXT:    [[GEP1:%.*]] = getelementptr i32, ptr [[PTR]], i64 1
; SCALAR-NEXT:    store i32 [[V0]], ptr [[GEP0]], align 4
; SCALAR-NEXT:    store i32 [[V1]], ptr [[GEP1]], align 4
; SCALAR-NEXT:    ret void
;
entry:
  invoke void @bar(ptr %ptr) to label %label unwind label %lpad
  ret void

label:
  ret void

lpad:
  %pad = landingpad { ptr, i32 }
  catch ptr null
  %gep0 = getelementptr i32, ptr %ptr, i64 0
  %gep1 = getelementptr i32, ptr %ptr, i64 1
  store i32 %v0, ptr %gep0
  store i32 %v1, ptr %gep1
  ret void
}
