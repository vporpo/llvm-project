; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 -sbvec-allow-non-pow2 %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 -sbvec-allow-non-pow2 %s -S | FileCheck %s --check-prefix=SCALAR

define void @pack_vectors_and_scalars(ptr %ptr, ptr %ptrX, ptr %ptrY, ptr %ptrZ) {
;
; VECTOR-LABEL: define void @pack_vectors_and_scalars(
; VECTOR-SAME: ptr [[PTR:%.*]], ptr [[PTRX:%.*]], ptr [[PTRY:%.*]], ptr [[PTRZ:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr <2 x float>, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[LD0:%.*]] = load <2 x float>, ptr [[PTRX]], align 8
; VECTOR-NEXT:    [[LD1:%.*]] = load float, ptr [[PTRY]], align 4
; VECTOR-NEXT:    [[LD2:%.*]] = load float, ptr [[PTRZ]], align 4
; VECTOR-NEXT:    [[XPACK:%.*]] = extractelement <2 x float> [[LD0]], i64 0
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <4 x float> poison, float [[XPACK]], i64 0
; VECTOR-NEXT:    [[XPACK1:%.*]] = extractelement <2 x float> [[LD0]], i64 1
; VECTOR-NEXT:    [[PACK2:%.*]] = insertelement <4 x float> [[PACK]], float [[XPACK1]], i64 1
; VECTOR-NEXT:    [[PACK3:%.*]] = insertelement <4 x float> [[PACK2]], float [[LD1]], i64 2
; VECTOR-NEXT:    [[PACK4:%.*]] = insertelement <4 x float> [[PACK3]], float [[LD2]], i64 3
; VECTOR-NEXT:    store <4 x float> [[PACK4]], ptr [[PTR0]], align 8
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @pack_vectors_and_scalars(
; SCALAR-SAME: ptr [[PTR:%.*]], ptr [[PTRX:%.*]], ptr [[PTRY:%.*]], ptr [[PTRZ:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr <2 x float>, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 2
; SCALAR-NEXT:    [[PTR2:%.*]] = getelementptr float, ptr [[PTR]], i32 3
; SCALAR-NEXT:    [[LD0:%.*]] = load <2 x float>, ptr [[PTRX]], align 8
; SCALAR-NEXT:    [[LD1:%.*]] = load float, ptr [[PTRY]], align 4
; SCALAR-NEXT:    [[LD2:%.*]] = load float, ptr [[PTRZ]], align 4
; SCALAR-NEXT:    store <2 x float> [[LD0]], ptr [[PTR0]], align 8
; SCALAR-NEXT:    store float [[LD1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    store float [[LD2]], ptr [[PTR2]], align 4
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr <2 x float>, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 2
  %ptr2 = getelementptr float, ptr %ptr, i32 3
  %ld0 = load <2 x float>, ptr %ptrX
  %ld1 = load float, ptr %ptrY
  %ld2 = load float, ptr %ptrZ
  store <2 x float> %ld0, ptr %ptr0
  store float %ld1, ptr %ptr1
  store float %ld2, ptr %ptr2
  ret void
}
