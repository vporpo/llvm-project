; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 -sbvec-disable-instr-op-seeds -sbvec-force-seeds=stores %s -S | FileCheck %s --check-prefix=STORES
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 -sbvec-force-seeds=loads %s -S | FileCheck %s --check-prefix=LOADS
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 -sbvec-force-seeds=instrops %s -S | FileCheck %s --check-prefix=INSTRS
; XFAIL: *

define void @cmp_seeds(ptr %ptrA, ptr %ptrB) {
; CHECK-LABEL: define void @cmp_seeds(
; CHECK-SAME: ptr [[PTRA:%.*]], ptr [[PTRB:%.*]]) {
; CHECK-NEXT:    [[GEPA0:%.*]] = getelementptr i8, ptr [[PTRA]], i32 0
; CHECK-NEXT:    [[GEPA1:%.*]] = getelementptr i8, ptr [[PTRA]], i32 1
; CHECK-NEXT:    [[GEPB0:%.*]] = getelementptr i8, ptr [[PTRB]], i32 0
; CHECK-NEXT:    [[GEPB1:%.*]] = getelementptr i8, ptr [[PTRB]], i32 1
; CHECK-NEXT:    [[VECL:%.*]] = load <2 x i8>, ptr [[GEPA0]], align 1, !sb [[META0:![0-9]+]]
; CHECK-NEXT:    [[VECL3:%.*]] = load <2 x i8>, ptr [[GEPB0]], align 1, !sb [[META1:![0-9]+]]
; CHECK-NEXT:    [[UNPACK5:%.*]] = extractelement <2 x i8> [[VECL3]], i64 1, !sb [[META1]]
; CHECK-NEXT:    [[UNPACK4:%.*]] = extractelement <2 x i8> [[VECL3]], i64 0, !sb [[META1]]
; CHECK-NEXT:    [[PACK:%.*]] = insertelement <2 x i8> poison, i8 [[UNPACK4]], i64 0
; CHECK-NEXT:    [[PACK1:%.*]] = insertelement <2 x i8> [[PACK]], i8 [[UNPACK5]], i64 1, !sb [[META0]]
; CHECK-NEXT:    [[VEC:%.*]] = sub <2 x i8> [[VECL]], [[PACK1]], !sb [[META0]]
; CHECK-NEXT:    [[UNPACK2:%.*]] = extractelement <2 x i8> [[VEC]], i64 1, !sb [[META0]]
; CHECK-NEXT:    [[UNPACK:%.*]] = extractelement <2 x i8> [[VEC]], i64 0, !sb [[META0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i8 [[UNPACK]], [[UNPACK2]]
; CHECK-NEXT:    ret void
;
; STORES-LABEL: define void @cmp_seeds(
; STORES-SAME: ptr [[PTRA:%.*]], ptr [[PTRB:%.*]]) {
; STORES-NEXT:    [[GEPA0:%.*]] = getelementptr i8, ptr [[PTRA]], i32 0
; STORES-NEXT:    [[GEPA1:%.*]] = getelementptr i8, ptr [[PTRA]], i32 1
; STORES-NEXT:    [[GEPB0:%.*]] = getelementptr i8, ptr [[PTRB]], i32 0
; STORES-NEXT:    [[GEPB1:%.*]] = getelementptr i8, ptr [[PTRB]], i32 1
; STORES-NEXT:    [[LDA0:%.*]] = load i8, ptr [[GEPA0]], align 1
; STORES-NEXT:    [[LDA1:%.*]] = load i8, ptr [[GEPA1]], align 1
; STORES-NEXT:    [[LDB0:%.*]] = load i8, ptr [[GEPB0]], align 1
; STORES-NEXT:    [[LDB1:%.*]] = load i8, ptr [[GEPB1]], align 1
; STORES-NEXT:    [[LHS:%.*]] = sub i8 [[LDA0]], [[LDB0]]
; STORES-NEXT:    [[RHS:%.*]] = sub i8 [[LDA1]], [[LDB1]]
; STORES-NEXT:    [[CMP:%.*]] = icmp eq i8 [[LHS]], [[RHS]]
; STORES-NEXT:    ret void
;
; LOADS-LABEL: define void @cmp_seeds(
; LOADS-SAME: ptr [[PTRA:%.*]], ptr [[PTRB:%.*]]) {
; LOADS-NEXT:    [[GEPA0:%.*]] = getelementptr i8, ptr [[PTRA]], i32 0
; LOADS-NEXT:    [[GEPA1:%.*]] = getelementptr i8, ptr [[PTRA]], i32 1
; LOADS-NEXT:    [[GEPB0:%.*]] = getelementptr i8, ptr [[PTRB]], i32 0
; LOADS-NEXT:    [[GEPB1:%.*]] = getelementptr i8, ptr [[PTRB]], i32 1
; LOADS-NEXT:    [[VECL:%.*]] = load <2 x i8>, ptr [[GEPA0]], align 1, !sb [[META0:![0-9]+]]
; LOADS-NEXT:    [[VECL3:%.*]] = load <2 x i8>, ptr [[GEPB0]], align 1, !sb [[META1:![0-9]+]]
; LOADS-NEXT:    [[UNPACK5:%.*]] = extractelement <2 x i8> [[VECL3]], i64 1, !sb [[META1]]
; LOADS-NEXT:    [[UNPACK4:%.*]] = extractelement <2 x i8> [[VECL3]], i64 0, !sb [[META1]]
; LOADS-NEXT:    [[PACK:%.*]] = insertelement <2 x i8> poison, i8 [[UNPACK4]], i64 0
; LOADS-NEXT:    [[PACK1:%.*]] = insertelement <2 x i8> [[PACK]], i8 [[UNPACK5]], i64 1, !sb [[META0]]
; LOADS-NEXT:    [[VEC:%.*]] = sub <2 x i8> [[VECL]], [[PACK1]], !sb [[META0]]
; LOADS-NEXT:    [[UNPACK2:%.*]] = extractelement <2 x i8> [[VEC]], i64 1, !sb [[META0]]
; LOADS-NEXT:    [[UNPACK:%.*]] = extractelement <2 x i8> [[VEC]], i64 0, !sb [[META0]]
; LOADS-NEXT:    [[CMP:%.*]] = icmp eq i8 [[UNPACK]], [[UNPACK2]]
; LOADS-NEXT:    ret void
;
; INSTRS-LABEL: define void @cmp_seeds(
; INSTRS-SAME: ptr [[PTRA:%.*]], ptr [[PTRB:%.*]]) {
; INSTRS-NEXT:    [[GEPA0:%.*]] = getelementptr i8, ptr [[PTRA]], i32 0
; INSTRS-NEXT:    [[GEPB0:%.*]] = getelementptr i8, ptr [[PTRB]], i32 0
; INSTRS-NEXT:    [[VECL:%.*]] = load <2 x i8>, ptr [[GEPA0]], align 1, !sb [[META0:![0-9]+]]
; INSTRS-NEXT:    [[VECL1:%.*]] = load <2 x i8>, ptr [[GEPB0]], align 1, !sb [[META0]]
; INSTRS-NEXT:    [[VEC:%.*]] = sub <2 x i8> [[VECL]], [[VECL1]], !sb [[META0]]
; INSTRS-NEXT:    [[UNPACK2:%.*]] = extractelement <2 x i8> [[VEC]], i64 1, !sb [[META0]]
; INSTRS-NEXT:    [[UNPACK:%.*]] = extractelement <2 x i8> [[VEC]], i64 0, !sb [[META0]]
; INSTRS-NEXT:    [[CMP:%.*]] = icmp eq i8 [[UNPACK]], [[UNPACK2]]
; INSTRS-NEXT:    ret void
;
  %gepA0 = getelementptr i8, ptr %ptrA, i32 0
  %gepA1 = getelementptr i8, ptr %ptrA, i32 1
  %gepB0 = getelementptr i8, ptr %ptrB, i32 0
  %gepB1 = getelementptr i8, ptr %ptrB, i32 1
  %ldA0 = load i8, ptr %gepA0
  %ldA1 = load i8, ptr %gepA1
  %ldB0 = load i8, ptr %gepB0
  %ldB1 = load i8, ptr %gepB1
  %lhs = sub i8 %ldA0, %ldB0
  %rhs = sub i8 %ldA1, %ldB1
  %cmp = icmp eq i8 %lhs, %rhs
  ret void
}

define void @cmp_seeds_diff_opcode(i8 %ldA0, i8 %ldA1, i8 %ldB0, i8 %ldB1) {
; CHECK-LABEL: define void @cmp_seeds_diff_opcode(
; CHECK-SAME: i8 [[LDA0:%.*]], i8 [[LDA1:%.*]], i8 [[LDB0:%.*]], i8 [[LDB1:%.*]]) {
; CHECK-NEXT:    [[LHS:%.*]] = add i8 [[LDA0]], [[LDB0]]
; CHECK-NEXT:    [[RHS:%.*]] = sub i8 [[LDA1]], [[LDB1]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i8 [[LHS]], [[RHS]]
; CHECK-NEXT:    ret void
;
; STORES-LABEL: define void @cmp_seeds_diff_opcode(
; STORES-SAME: i8 [[LDA0:%.*]], i8 [[LDA1:%.*]], i8 [[LDB0:%.*]], i8 [[LDB1:%.*]]) {
; STORES-NEXT:    [[LHS:%.*]] = add i8 [[LDA0]], [[LDB0]]
; STORES-NEXT:    [[RHS:%.*]] = sub i8 [[LDA1]], [[LDB1]]
; STORES-NEXT:    [[CMP:%.*]] = icmp eq i8 [[LHS]], [[RHS]]
; STORES-NEXT:    ret void
;
; LOADS-LABEL: define void @cmp_seeds_diff_opcode(
; LOADS-SAME: i8 [[LDA0:%.*]], i8 [[LDA1:%.*]], i8 [[LDB0:%.*]], i8 [[LDB1:%.*]]) {
; LOADS-NEXT:    [[LHS:%.*]] = add i8 [[LDA0]], [[LDB0]]
; LOADS-NEXT:    [[RHS:%.*]] = sub i8 [[LDA1]], [[LDB1]]
; LOADS-NEXT:    [[CMP:%.*]] = icmp eq i8 [[LHS]], [[RHS]]
; LOADS-NEXT:    ret void
;
; INSTRS-LABEL: define void @cmp_seeds_diff_opcode(
; INSTRS-SAME: i8 [[LDA0:%.*]], i8 [[LDA1:%.*]], i8 [[LDB0:%.*]], i8 [[LDB1:%.*]]) {
; INSTRS-NEXT:    [[LHS:%.*]] = add i8 [[LDA0]], [[LDB0]]
; INSTRS-NEXT:    [[RHS:%.*]] = sub i8 [[LDA1]], [[LDB1]]
; INSTRS-NEXT:    [[CMP:%.*]] = icmp eq i8 [[LHS]], [[RHS]]
; INSTRS-NEXT:    ret void
;
  %lhs = add i8 %ldA0, %ldB0
  %rhs = sub i8 %ldA1, %ldB1
  %cmp = icmp eq i8 %lhs, %rhs
  ret void
}

define void @cmp_seeds_with_cmp_operands(i8 %ldA0, i8 %ldA1, i8 %ldB0, i8 %ldB1) {
; CHECK-LABEL: define void @cmp_seeds_with_cmp_operands(
; CHECK-SAME: i8 [[LDA0:%.*]], i8 [[LDA1:%.*]], i8 [[LDB0:%.*]], i8 [[LDB1:%.*]]) {
; CHECK-NEXT:    [[PACK2:%.*]] = insertelement <2 x i8> poison, i8 [[LDB0]], i64 0
; CHECK-NEXT:    [[PACK3:%.*]] = insertelement <2 x i8> [[PACK2]], i8 [[LDB1]], i64 1, !sb [[META2:![0-9]+]]
; CHECK-NEXT:    [[PACK:%.*]] = insertelement <2 x i8> poison, i8 [[LDA0]], i64 0
; CHECK-NEXT:    [[PACK1:%.*]] = insertelement <2 x i8> [[PACK]], i8 [[LDA1]], i64 1, !sb [[META2]]
; CHECK-NEXT:    [[VCMP:%.*]] = icmp eq <2 x i8> [[PACK1]], [[PACK3]], !sb [[META2]]
; CHECK-NEXT:    [[UNPACK4:%.*]] = extractelement <2 x i1> [[VCMP]], i64 1, !sb [[META2]]
; CHECK-NEXT:    [[UNPACK:%.*]] = extractelement <2 x i1> [[VCMP]], i64 0, !sb [[META2]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i1 [[UNPACK]], [[UNPACK4]]
; CHECK-NEXT:    ret void
;
; STORES-LABEL: define void @cmp_seeds_with_cmp_operands(
; STORES-SAME: i8 [[LDA0:%.*]], i8 [[LDA1:%.*]], i8 [[LDB0:%.*]], i8 [[LDB1:%.*]]) {
; STORES-NEXT:    [[LHS:%.*]] = icmp eq i8 [[LDA0]], [[LDB0]]
; STORES-NEXT:    [[RHS:%.*]] = icmp eq i8 [[LDA1]], [[LDB1]]
; STORES-NEXT:    [[CMP:%.*]] = icmp eq i1 [[LHS]], [[RHS]]
; STORES-NEXT:    ret void
;
; LOADS-LABEL: define void @cmp_seeds_with_cmp_operands(
; LOADS-SAME: i8 [[LDA0:%.*]], i8 [[LDA1:%.*]], i8 [[LDB0:%.*]], i8 [[LDB1:%.*]]) {
; LOADS-NEXT:    [[LHS:%.*]] = icmp eq i8 [[LDA0]], [[LDB0]]
; LOADS-NEXT:    [[RHS:%.*]] = icmp eq i8 [[LDA1]], [[LDB1]]
; LOADS-NEXT:    [[CMP:%.*]] = icmp eq i1 [[LHS]], [[RHS]]
; LOADS-NEXT:    ret void
;
; INSTRS-LABEL: define void @cmp_seeds_with_cmp_operands(
; INSTRS-SAME: i8 [[LDA0:%.*]], i8 [[LDA1:%.*]], i8 [[LDB0:%.*]], i8 [[LDB1:%.*]]) {
; INSTRS-NEXT:    [[PACK2:%.*]] = insertelement <2 x i8> poison, i8 [[LDB0]], i64 0
; INSTRS-NEXT:    [[PACK3:%.*]] = insertelement <2 x i8> [[PACK2]], i8 [[LDB1]], i64 1, !sb [[META1:![0-9]+]]
; INSTRS-NEXT:    [[PACK:%.*]] = insertelement <2 x i8> poison, i8 [[LDA0]], i64 0
; INSTRS-NEXT:    [[PACK1:%.*]] = insertelement <2 x i8> [[PACK]], i8 [[LDA1]], i64 1, !sb [[META1]]
; INSTRS-NEXT:    [[VCMP:%.*]] = icmp eq <2 x i8> [[PACK1]], [[PACK3]], !sb [[META1]]
; INSTRS-NEXT:    [[UNPACK4:%.*]] = extractelement <2 x i1> [[VCMP]], i64 1, !sb [[META1]]
; INSTRS-NEXT:    [[UNPACK:%.*]] = extractelement <2 x i1> [[VCMP]], i64 0, !sb [[META1]]
; INSTRS-NEXT:    [[CMP:%.*]] = icmp eq i1 [[UNPACK]], [[UNPACK4]]
; INSTRS-NEXT:    ret void
;
  %lhs = icmp eq i8 %ldA0, %ldB0
  %rhs = icmp eq i8 %ldA1, %ldB1
  %cmp = icmp eq i1 %lhs, %rhs
  ret void
}

; This checks what happens when the Sub seeds get erased after the tree rooted
; at the Store seeds gets vectorized.
define void @cmp_and_store_seeds(ptr %ptrA, i8 %ldA0, i8 %ldA1, i8 %ldB0, i8 %ldB1) {
; CHECK-LABEL: define void @cmp_and_store_seeds(
; CHECK-SAME: ptr [[PTRA:%.*]], i8 [[LDA0:%.*]], i8 [[LDA1:%.*]], i8 [[LDB0:%.*]], i8 [[LDB1:%.*]]) {
; CHECK-NEXT:    [[PACK2:%.*]] = insertelement <2 x i8> poison, i8 [[LDB0]], i64 0
; CHECK-NEXT:    [[PACK3:%.*]] = insertelement <2 x i8> [[PACK2]], i8 [[LDB1]], i64 1, !sb [[META3:![0-9]+]]
; CHECK-NEXT:    [[PACK:%.*]] = insertelement <2 x i8> poison, i8 [[LDA0]], i64 0
; CHECK-NEXT:    [[PACK1:%.*]] = insertelement <2 x i8> [[PACK]], i8 [[LDA1]], i64 1, !sb [[META3]]
; CHECK-NEXT:    [[GEPA0:%.*]] = getelementptr i8, ptr [[PTRA]], i32 0
; CHECK-NEXT:    [[VEC:%.*]] = sub <2 x i8> [[PACK1]], [[PACK3]], !sb [[META3]]
; CHECK-NEXT:    [[UNPACK4:%.*]] = extractelement <2 x i8> [[VEC]], i64 1, !sb [[META3]]
; CHECK-NEXT:    [[UNPACK:%.*]] = extractelement <2 x i8> [[VEC]], i64 0, !sb [[META3]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i8 [[UNPACK]], [[UNPACK4]]
; CHECK-NEXT:    store <2 x i8> [[VEC]], ptr [[GEPA0]], align 1, !sb [[META3]]
; CHECK-NEXT:    ret void
;
; STORES-LABEL: define void @cmp_and_store_seeds(
; STORES-SAME: ptr [[PTRA:%.*]], i8 [[LDA0:%.*]], i8 [[LDA1:%.*]], i8 [[LDB0:%.*]], i8 [[LDB1:%.*]]) {
; STORES-NEXT:    [[PACK2:%.*]] = insertelement <2 x i8> poison, i8 [[LDB0]], i64 0
; STORES-NEXT:    [[PACK3:%.*]] = insertelement <2 x i8> [[PACK2]], i8 [[LDB1]], i64 1, !sb [[META0:![0-9]+]]
; STORES-NEXT:    [[PACK:%.*]] = insertelement <2 x i8> poison, i8 [[LDA0]], i64 0
; STORES-NEXT:    [[PACK1:%.*]] = insertelement <2 x i8> [[PACK]], i8 [[LDA1]], i64 1, !sb [[META0]]
; STORES-NEXT:    [[GEPA0:%.*]] = getelementptr i8, ptr [[PTRA]], i32 0
; STORES-NEXT:    [[VEC:%.*]] = sub <2 x i8> [[PACK1]], [[PACK3]], !sb [[META0]]
; STORES-NEXT:    [[UNPACK4:%.*]] = extractelement <2 x i8> [[VEC]], i64 1, !sb [[META0]]
; STORES-NEXT:    [[UNPACK:%.*]] = extractelement <2 x i8> [[VEC]], i64 0, !sb [[META0]]
; STORES-NEXT:    [[CMP:%.*]] = icmp eq i8 [[UNPACK]], [[UNPACK4]]
; STORES-NEXT:    store <2 x i8> [[VEC]], ptr [[GEPA0]], align 1, !sb [[META0]]
; STORES-NEXT:    ret void
;
; LOADS-LABEL: define void @cmp_and_store_seeds(
; LOADS-SAME: ptr [[PTRA:%.*]], i8 [[LDA0:%.*]], i8 [[LDA1:%.*]], i8 [[LDB0:%.*]], i8 [[LDB1:%.*]]) {
; LOADS-NEXT:    [[GEPA0:%.*]] = getelementptr i8, ptr [[PTRA]], i32 0
; LOADS-NEXT:    [[GEPA1:%.*]] = getelementptr i8, ptr [[PTRA]], i32 1
; LOADS-NEXT:    [[LHS:%.*]] = sub i8 [[LDA0]], [[LDB0]]
; LOADS-NEXT:    [[RHS:%.*]] = sub i8 [[LDA1]], [[LDB1]]
; LOADS-NEXT:    [[CMP:%.*]] = icmp eq i8 [[LHS]], [[RHS]]
; LOADS-NEXT:    store i8 [[LHS]], ptr [[GEPA0]], align 1
; LOADS-NEXT:    store i8 [[RHS]], ptr [[GEPA1]], align 1
; LOADS-NEXT:    ret void
;
; INSTRS-LABEL: define void @cmp_and_store_seeds(
; INSTRS-SAME: ptr [[PTRA:%.*]], i8 [[LDA0:%.*]], i8 [[LDA1:%.*]], i8 [[LDB0:%.*]], i8 [[LDB1:%.*]]) {
; INSTRS-NEXT:    [[PACK2:%.*]] = insertelement <2 x i8> poison, i8 [[LDB0]], i64 0
; INSTRS-NEXT:    [[PACK3:%.*]] = insertelement <2 x i8> [[PACK2]], i8 [[LDB1]], i64 1, !sb [[META2:![0-9]+]]
; INSTRS-NEXT:    [[PACK:%.*]] = insertelement <2 x i8> poison, i8 [[LDA0]], i64 0
; INSTRS-NEXT:    [[PACK1:%.*]] = insertelement <2 x i8> [[PACK]], i8 [[LDA1]], i64 1, !sb [[META2]]
; INSTRS-NEXT:    [[GEPA0:%.*]] = getelementptr i8, ptr [[PTRA]], i32 0
; INSTRS-NEXT:    [[GEPA1:%.*]] = getelementptr i8, ptr [[PTRA]], i32 1
; INSTRS-NEXT:    [[VEC:%.*]] = sub <2 x i8> [[PACK1]], [[PACK3]], !sb [[META2]]
; INSTRS-NEXT:    [[UNPACK4:%.*]] = extractelement <2 x i8> [[VEC]], i64 1, !sb [[META2]]
; INSTRS-NEXT:    [[UNPACK:%.*]] = extractelement <2 x i8> [[VEC]], i64 0, !sb [[META2]]
; INSTRS-NEXT:    [[CMP:%.*]] = icmp eq i8 [[UNPACK]], [[UNPACK4]]
; INSTRS-NEXT:    store i8 [[UNPACK]], ptr [[GEPA0]], align 1
; INSTRS-NEXT:    store i8 [[UNPACK4]], ptr [[GEPA1]], align 1
; INSTRS-NEXT:    ret void
;
  %gepA0 = getelementptr i8, ptr %ptrA, i32 0
  %gepA1 = getelementptr i8, ptr %ptrA, i32 1
  %lhs = sub i8 %ldA0, %ldB0
  %rhs = sub i8 %ldA1, %ldB1
  %cmp = icmp eq i8 %lhs, %rhs
  store i8 %lhs, ptr %gepA0
  store i8 %rhs, ptr %gepA1
  ret void
}

define void @cmp_same_seeds(i8 %ldA0, i8 %ldA1, i8 %ldB0, i8 %ldB1) {
; CHECK-LABEL: define void @cmp_same_seeds(
; CHECK-SAME: i8 [[LDA0:%.*]], i8 [[LDA1:%.*]], i8 [[LDB0:%.*]], i8 [[LDB1:%.*]]) {
; CHECK-NEXT:    [[PACK2:%.*]] = insertelement <2 x i8> poison, i8 [[LDB0]], i64 0
; CHECK-NEXT:    [[PACK3:%.*]] = insertelement <2 x i8> [[PACK2]], i8 [[LDB1]], i64 1, !sb [[META4:![0-9]+]]
; CHECK-NEXT:    [[PACK:%.*]] = insertelement <2 x i8> poison, i8 [[LDA0]], i64 0
; CHECK-NEXT:    [[PACK1:%.*]] = insertelement <2 x i8> [[PACK]], i8 [[LDA1]], i64 1, !sb [[META4]]
; CHECK-NEXT:    [[VEC:%.*]] = sub <2 x i8> [[PACK1]], [[PACK3]], !sb [[META4]]
; CHECK-NEXT:    [[UNPACK4:%.*]] = extractelement <2 x i8> [[VEC]], i64 1, !sb [[META4]]
; CHECK-NEXT:    [[UNPACK:%.*]] = extractelement <2 x i8> [[VEC]], i64 0, !sb [[META4]]
; CHECK-NEXT:    [[CMP0:%.*]] = icmp eq i8 [[UNPACK]], [[UNPACK4]]
; CHECK-NEXT:    [[CMP1:%.*]] = icmp eq i8 [[UNPACK]], [[UNPACK4]]
; CHECK-NEXT:    ret void
;
; STORES-LABEL: define void @cmp_same_seeds(
; STORES-SAME: i8 [[LDA0:%.*]], i8 [[LDA1:%.*]], i8 [[LDB0:%.*]], i8 [[LDB1:%.*]]) {
; STORES-NEXT:    [[LHS:%.*]] = sub i8 [[LDA0]], [[LDB0]]
; STORES-NEXT:    [[RHS:%.*]] = sub i8 [[LDA1]], [[LDB1]]
; STORES-NEXT:    [[CMP0:%.*]] = icmp eq i8 [[LHS]], [[RHS]]
; STORES-NEXT:    [[CMP1:%.*]] = icmp eq i8 [[LHS]], [[RHS]]
; STORES-NEXT:    ret void
;
; LOADS-LABEL: define void @cmp_same_seeds(
; LOADS-SAME: i8 [[LDA0:%.*]], i8 [[LDA1:%.*]], i8 [[LDB0:%.*]], i8 [[LDB1:%.*]]) {
; LOADS-NEXT:    [[LHS:%.*]] = sub i8 [[LDA0]], [[LDB0]]
; LOADS-NEXT:    [[RHS:%.*]] = sub i8 [[LDA1]], [[LDB1]]
; LOADS-NEXT:    [[CMP0:%.*]] = icmp eq i8 [[LHS]], [[RHS]]
; LOADS-NEXT:    [[CMP1:%.*]] = icmp eq i8 [[LHS]], [[RHS]]
; LOADS-NEXT:    ret void
;
; INSTRS-LABEL: define void @cmp_same_seeds(
; INSTRS-SAME: i8 [[LDA0:%.*]], i8 [[LDA1:%.*]], i8 [[LDB0:%.*]], i8 [[LDB1:%.*]]) {
; INSTRS-NEXT:    [[PACK2:%.*]] = insertelement <2 x i8> poison, i8 [[LDB0]], i64 0
; INSTRS-NEXT:    [[PACK3:%.*]] = insertelement <2 x i8> [[PACK2]], i8 [[LDB1]], i64 1, !sb [[META3:![0-9]+]]
; INSTRS-NEXT:    [[PACK:%.*]] = insertelement <2 x i8> poison, i8 [[LDA0]], i64 0
; INSTRS-NEXT:    [[PACK1:%.*]] = insertelement <2 x i8> [[PACK]], i8 [[LDA1]], i64 1, !sb [[META3]]
; INSTRS-NEXT:    [[VEC:%.*]] = sub <2 x i8> [[PACK1]], [[PACK3]], !sb [[META3]]
; INSTRS-NEXT:    [[UNPACK4:%.*]] = extractelement <2 x i8> [[VEC]], i64 1, !sb [[META3]]
; INSTRS-NEXT:    [[UNPACK:%.*]] = extractelement <2 x i8> [[VEC]], i64 0, !sb [[META3]]
; INSTRS-NEXT:    [[CMP0:%.*]] = icmp eq i8 [[UNPACK]], [[UNPACK4]]
; INSTRS-NEXT:    [[CMP1:%.*]] = icmp eq i8 [[UNPACK]], [[UNPACK4]]
; INSTRS-NEXT:    ret void
;
  %lhs = sub i8 %ldA0, %ldB0
  %rhs = sub i8 %ldA1, %ldB1
  %cmp0 = icmp eq i8 %lhs, %rhs
  %cmp1 = icmp eq i8 %lhs, %rhs
  ret void
}

define void @cmp_shared_seeds(i8 %ldA0, i8 %ldA1, i8 %ldB0, i8 %ldB1) {
; CHECK-LABEL: define void @cmp_shared_seeds(
; CHECK-SAME: i8 [[LDA0:%.*]], i8 [[LDA1:%.*]], i8 [[LDB0:%.*]], i8 [[LDB1:%.*]]) {
; CHECK-NEXT:    [[PACK2:%.*]] = insertelement <2 x i8> poison, i8 [[LDB0]], i64 0
; CHECK-NEXT:    [[PACK3:%.*]] = insertelement <2 x i8> [[PACK2]], i8 [[LDB1]], i64 1, !sb [[META5:![0-9]+]]
; CHECK-NEXT:    [[PACK:%.*]] = insertelement <2 x i8> poison, i8 [[LDA0]], i64 0
; CHECK-NEXT:    [[PACK1:%.*]] = insertelement <2 x i8> [[PACK]], i8 [[LDA1]], i64 1, !sb [[META5]]
; CHECK-NEXT:    [[VEC:%.*]] = sub <2 x i8> [[PACK1]], [[PACK3]], !sb [[META5]]
; CHECK-NEXT:    [[UNPACK4:%.*]] = extractelement <2 x i8> [[VEC]], i64 1, !sb [[META5]]
; CHECK-NEXT:    [[UNPACK:%.*]] = extractelement <2 x i8> [[VEC]], i64 0, !sb [[META5]]
; CHECK-NEXT:    [[CMP0:%.*]] = icmp eq i8 [[UNPACK]], [[UNPACK4]]
; CHECK-NEXT:    [[RHS2:%.*]] = sub i8 [[LDA1]], [[LDB1]]
; CHECK-NEXT:    [[CMP1:%.*]] = icmp eq i8 [[UNPACK]], [[RHS2]]
; CHECK-NEXT:    ret void
;
; STORES-LABEL: define void @cmp_shared_seeds(
; STORES-SAME: i8 [[LDA0:%.*]], i8 [[LDA1:%.*]], i8 [[LDB0:%.*]], i8 [[LDB1:%.*]]) {
; STORES-NEXT:    [[LHS:%.*]] = sub i8 [[LDA0]], [[LDB0]]
; STORES-NEXT:    [[RHS:%.*]] = sub i8 [[LDA1]], [[LDB1]]
; STORES-NEXT:    [[CMP0:%.*]] = icmp eq i8 [[LHS]], [[RHS]]
; STORES-NEXT:    [[RHS2:%.*]] = sub i8 [[LDA1]], [[LDB1]]
; STORES-NEXT:    [[CMP1:%.*]] = icmp eq i8 [[LHS]], [[RHS2]]
; STORES-NEXT:    ret void
;
; LOADS-LABEL: define void @cmp_shared_seeds(
; LOADS-SAME: i8 [[LDA0:%.*]], i8 [[LDA1:%.*]], i8 [[LDB0:%.*]], i8 [[LDB1:%.*]]) {
; LOADS-NEXT:    [[LHS:%.*]] = sub i8 [[LDA0]], [[LDB0]]
; LOADS-NEXT:    [[RHS:%.*]] = sub i8 [[LDA1]], [[LDB1]]
; LOADS-NEXT:    [[CMP0:%.*]] = icmp eq i8 [[LHS]], [[RHS]]
; LOADS-NEXT:    [[RHS2:%.*]] = sub i8 [[LDA1]], [[LDB1]]
; LOADS-NEXT:    [[CMP1:%.*]] = icmp eq i8 [[LHS]], [[RHS2]]
; LOADS-NEXT:    ret void
;
; INSTRS-LABEL: define void @cmp_shared_seeds(
; INSTRS-SAME: i8 [[LDA0:%.*]], i8 [[LDA1:%.*]], i8 [[LDB0:%.*]], i8 [[LDB1:%.*]]) {
; INSTRS-NEXT:    [[PACK2:%.*]] = insertelement <2 x i8> poison, i8 [[LDB0]], i64 0
; INSTRS-NEXT:    [[PACK3:%.*]] = insertelement <2 x i8> [[PACK2]], i8 [[LDB1]], i64 1, !sb [[META4:![0-9]+]]
; INSTRS-NEXT:    [[PACK:%.*]] = insertelement <2 x i8> poison, i8 [[LDA0]], i64 0
; INSTRS-NEXT:    [[PACK1:%.*]] = insertelement <2 x i8> [[PACK]], i8 [[LDA1]], i64 1, !sb [[META4]]
; INSTRS-NEXT:    [[VEC:%.*]] = sub <2 x i8> [[PACK1]], [[PACK3]], !sb [[META4]]
; INSTRS-NEXT:    [[UNPACK4:%.*]] = extractelement <2 x i8> [[VEC]], i64 1, !sb [[META4]]
; INSTRS-NEXT:    [[UNPACK:%.*]] = extractelement <2 x i8> [[VEC]], i64 0, !sb [[META4]]
; INSTRS-NEXT:    [[CMP0:%.*]] = icmp eq i8 [[UNPACK]], [[UNPACK4]]
; INSTRS-NEXT:    [[RHS2:%.*]] = sub i8 [[LDA1]], [[LDB1]]
; INSTRS-NEXT:    [[CMP1:%.*]] = icmp eq i8 [[UNPACK]], [[RHS2]]
; INSTRS-NEXT:    ret void
;
  %lhs = sub i8 %ldA0, %ldB0
  %rhs = sub i8 %ldA1, %ldB1
  %cmp0 = icmp eq i8 %lhs, %rhs
  %rhs2 = sub i8 %ldA1, %ldB1
  %cmp1 = icmp eq i8 %lhs, %rhs2
  ret void
}
;.
; CHECK: [[META0]] = !{!"region", i32 0}
; CHECK: [[META1]] = !{!"region", i32 1}
; CHECK: [[META2]] = !{!"region", i32 2}
; CHECK: [[META3]] = !{!"region", i32 3}
; CHECK: [[META4]] = !{!"region", i32 4}
; CHECK: [[META5]] = !{!"region", i32 5}
;.
; STORES: [[META0]] = !{!"region", i32 0}
;.
; LOADS: [[META0]] = !{!"region", i32 0}
; LOADS: [[META1]] = !{!"region", i32 1}
;.
; INSTRS: [[META0]] = !{!"region", i32 2}
; INSTRS: [[META1]] = !{!"region", i32 3}
; INSTRS: [[META2]] = !{!"region", i32 4}
; INSTRS: [[META3]] = !{!"region", i32 5}
; INSTRS: [[META4]] = !{!"region", i32 6}
;.
