; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 %s -S | FileCheck %s --check-prefix=SCALAR
;
; If they don't have the same math flags then just drop the flags.
define void @diff_math_flags(ptr %ptr, i1 %cond, float %a0, float %a1, float %b0, float %b1) {
;
; VECTOR-LABEL: define void @diff_math_flags(
; VECTOR-SAME: ptr [[PTR:%.*]], i1 [[COND:%.*]], float [[A0:%.*]], float [[A1:%.*]], float [[B0:%.*]], float [[B1:%.*]]) {
; VECTOR-NEXT:    [[FADD0:%.*]] = fadd float [[A0]], [[B0]]
; VECTOR-NEXT:    [[FADD1:%.*]] = fadd fast float [[A1]], [[B1]]
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <2 x float> poison, float [[FADD0]], i64 0
; VECTOR-NEXT:    [[PACK1:%.*]] = insertelement <2 x float> [[PACK]], float [[FADD1]], i64 1
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    store <2 x float> [[PACK1]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @diff_math_flags(
; SCALAR-SAME: ptr [[PTR:%.*]], i1 [[COND:%.*]], float [[A0:%.*]], float [[A1:%.*]], float [[B0:%.*]], float [[B1:%.*]]) {
; SCALAR-NEXT:    [[FADD0:%.*]] = fadd float [[A0]], [[B0]]
; SCALAR-NEXT:    [[FADD1:%.*]] = fadd fast float [[A1]], [[B1]]
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    store float [[FADD0]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[FADD1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    ret void
;
  %fadd0 = fadd float %a0, %b0
  %fadd1 = fadd fast float %a1, %b1
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1
  store float %fadd0, ptr %ptr0
  store float %fadd1, ptr %ptr1
  ret void
}

define void @same_math_flags(ptr %ptr, i1 %cond, float %a0, float %a1, float %b0, float %b1) {
;
; VECTOR-LABEL: define void @same_math_flags(
; VECTOR-SAME: ptr [[PTR:%.*]], i1 [[COND:%.*]], float [[A0:%.*]], float [[A1:%.*]], float [[B0:%.*]], float [[B1:%.*]]) {
; VECTOR-NEXT:    [[PACK2:%.*]] = insertelement <2 x float> poison, float [[B0]], i64 0
; VECTOR-NEXT:    [[PACK3:%.*]] = insertelement <2 x float> [[PACK2]], float [[B1]], i64 1
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <2 x float> poison, float [[A0]], i64 0
; VECTOR-NEXT:    [[PACK1:%.*]] = insertelement <2 x float> [[PACK]], float [[A1]], i64 1
; VECTOR-NEXT:    [[VEC:%.*]] = fadd fast <2 x float> [[PACK1]], [[PACK3]]
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    store <2 x float> [[VEC]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @same_math_flags(
; SCALAR-SAME: ptr [[PTR:%.*]], i1 [[COND:%.*]], float [[A0:%.*]], float [[A1:%.*]], float [[B0:%.*]], float [[B1:%.*]]) {
; SCALAR-NEXT:    [[FADD0:%.*]] = fadd fast float [[A0]], [[B0]]
; SCALAR-NEXT:    [[FADD1:%.*]] = fadd fast float [[A1]], [[B1]]
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    store float [[FADD0]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[FADD1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    ret void
;
  %fadd0 = fadd fast float %a0, %b0
  %fadd1 = fadd fast float %a1, %b1
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1
  store float %fadd0, ptr %ptr0
  store float %fadd1, ptr %ptr1
  ret void
}
