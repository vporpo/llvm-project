; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 %s -S | FileCheck %s --check-prefix=SCALAR

define void @pack_vectors(ptr %ptr, ptr %ptrX, ptr %ptrY) {
;
; VECTOR-LABEL: define void @pack_vectors(
; VECTOR-SAME: ptr [[PTR:%.*]], ptr [[PTRX:%.*]], ptr [[PTRY:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr <2 x float>, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[LD0:%.*]] = load <2 x float>, ptr [[PTRX]], align 8
; VECTOR-NEXT:    [[LD1:%.*]] = load <2 x float>, ptr [[PTRY]], align 8
; VECTOR-NEXT:    [[XPACK:%.*]] = extractelement <2 x float> [[LD0]], i64 0
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <4 x float> poison, float [[XPACK]], i64 0
; VECTOR-NEXT:    [[XPACK1:%.*]] = extractelement <2 x float> [[LD0]], i64 1
; VECTOR-NEXT:    [[PACK2:%.*]] = insertelement <4 x float> [[PACK]], float [[XPACK1]], i64 1
; VECTOR-NEXT:    [[XPACK3:%.*]] = extractelement <2 x float> [[LD1]], i64 0
; VECTOR-NEXT:    [[PACK4:%.*]] = insertelement <4 x float> [[PACK2]], float [[XPACK3]], i64 2
; VECTOR-NEXT:    [[XPACK5:%.*]] = extractelement <2 x float> [[LD1]], i64 1
; VECTOR-NEXT:    [[PACK6:%.*]] = insertelement <4 x float> [[PACK4]], float [[XPACK5]], i64 3
; VECTOR-NEXT:    store <4 x float> [[PACK6]], ptr [[PTR0]], align 8
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @pack_vectors(
; SCALAR-SAME: ptr [[PTR:%.*]], ptr [[PTRX:%.*]], ptr [[PTRY:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr <2 x float>, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr <2 x float>, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[LD0:%.*]] = load <2 x float>, ptr [[PTRX]], align 8
; SCALAR-NEXT:    [[LD1:%.*]] = load <2 x float>, ptr [[PTRY]], align 8
; SCALAR-NEXT:    store <2 x float> [[LD0]], ptr [[PTR0]], align 8
; SCALAR-NEXT:    store <2 x float> [[LD1]], ptr [[PTR1]], align 8
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr <2 x float>, ptr %ptr, i32 0
  %ptr1 = getelementptr <2 x float>, ptr %ptr, i32 1
  %ld0 = load <2 x float>, ptr %ptrX
  %ld1 = load <2 x float>, ptr %ptrY
  store <2 x float> %ld0, ptr %ptr0
  store <2 x float> %ld1, ptr %ptr1
  ret void
}
