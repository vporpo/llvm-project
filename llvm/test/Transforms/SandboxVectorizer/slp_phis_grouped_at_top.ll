; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 %s -S | FileCheck %s --check-prefix=SCALAR

define void @phis_grouped_at_top(ptr noalias %ptr) {
; VECTOR-LABEL: define void @phis_grouped_at_top(
; VECTOR-SAME: ptr noalias [[PTR:%.*]]) {
; VECTOR-NEXT:  entry:
; VECTOR-NEXT:    br label [[BB:%.*]]
; VECTOR:       bb:
; VECTOR-NEXT:    [[PHI0:%.*]] = phi i32 [ 1, [[BB]] ], [ 0, [[ENTRY:%.*]] ]
; VECTOR-NEXT:    [[PHI1:%.*]] = phi i32 [ 4, [[BB]] ], [ 1, [[ENTRY]] ]
; VECTOR-NEXT:    [[PHI3:%.*]] = phi i32 [ 2, [[BB]] ], [ -1, [[ENTRY]] ]
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <2 x i32> poison, i32 [[PHI0]], i64 0
; VECTOR-NEXT:    [[PACK1:%.*]] = insertelement <2 x i32> [[PACK]], i32 [[PHI1]], i64 1
; VECTOR-NEXT:    store <2 x i32> [[PACK1]], ptr [[PTR]], align 4
; VECTOR-NEXT:    br label [[BB]]
;
; SCALAR-LABEL: define void @phis_grouped_at_top(
; SCALAR-SAME: ptr noalias [[PTR:%.*]]) {
; SCALAR-NEXT:  entry:
; SCALAR-NEXT:    br label [[BB:%.*]]
; SCALAR:       bb:
; SCALAR-NEXT:    [[PHI0:%.*]] = phi i32 [ 1, [[BB]] ], [ 0, [[ENTRY:%.*]] ]
; SCALAR-NEXT:    [[PHI1:%.*]] = phi i32 [ 4, [[BB]] ], [ 1, [[ENTRY]] ]
; SCALAR-NEXT:    [[PHI3:%.*]] = phi i32 [ 2, [[BB]] ], [ -1, [[ENTRY]] ]
; SCALAR-NEXT:    store i32 [[PHI0]], ptr [[PTR]], align 4
; SCALAR-NEXT:    [[GEP:%.*]] = getelementptr i32, ptr [[PTR]], i64 1
; SCALAR-NEXT:    store i32 [[PHI1]], ptr [[GEP]], align 4
; SCALAR-NEXT:    br label [[BB]]
;
entry:
  br label %bb

bb:
  %phi0 = phi i32 [ 1, %bb ], [ 0, %entry ]
  %phi1 = phi i32 [ 4, %bb ], [ 1, %entry ]
  %phi3 = phi i32 [ 2, %bb ], [ -1, %entry ]
  store i32 %phi0, ptr %ptr, align 4
  %gep = getelementptr i32, ptr %ptr, i64 1
  store i32 %phi1, ptr %gep, align 4
  br label %bb
}
