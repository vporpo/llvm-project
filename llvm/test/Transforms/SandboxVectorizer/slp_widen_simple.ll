; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 %s -S | FileCheck %s --check-prefix=SCALAR

define void @widen(ptr %ptr) {
; VECTOR-LABEL: define void @widen
; VECTOR-SAME: (ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[VECL:%.*]] = load <2 x float>, ptr [[PTR0]], align 4, !sb [[META0:![0-9]+]]
; VECTOR-NEXT:    store <2 x float> [[VECL]], ptr [[PTR0]], align 4, !sb [[META0]]
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @widen
; SCALAR-SAME: (ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[LD0:%.*]] = load float, ptr [[PTR0]], align 4
; SCALAR-NEXT:    [[LD1:%.*]] = load float, ptr [[PTR1]], align 4
; SCALAR-NEXT:    store float [[LD0]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[LD1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1
  %ld0 = load float, ptr %ptr0
  %ld1 = load float, ptr %ptr1
  store float %ld0, ptr %ptr0
  store float %ld1, ptr %ptr1
  ret void
}

define void @widen_stores_with_arg_ptr1(ptr %ptr1) {
; VECTOR-LABEL: define void @widen_stores_with_arg_ptr1
; VECTOR-SAME: (ptr [[PTR1:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR1]], i32 -1
; VECTOR-NEXT:    [[VECL:%.*]] = load <2 x float>, ptr [[PTR0]], align 4, !sb [[META1:![0-9]+]]
; VECTOR-NEXT:    store <2 x float> [[VECL]], ptr [[PTR0]], align 4, !sb [[META1]]
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @widen_stores_with_arg_ptr1
; SCALAR-SAME: (ptr [[PTR1:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR1]], i32 -1
; SCALAR-NEXT:    [[LD0:%.*]] = load float, ptr [[PTR0]], align 4
; SCALAR-NEXT:    [[LD1:%.*]] = load float, ptr [[PTR1]], align 4
; SCALAR-NEXT:    store float [[LD0]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[LD1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr1, i32 -1
  %ld0 = load float, ptr %ptr0
  %ld1 = load float, ptr %ptr1
  store float %ld0, ptr %ptr0
  store float %ld1, ptr %ptr1
  ret void
}

; We don't support scalable vectors. Make sure we don't crash.
define void @scalable_vec(ptr %ptr) {
; VECTOR-LABEL: define void @scalable_vec
; VECTOR-SAME: (ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr i8, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[PTR1:%.*]] = getelementptr i8, ptr [[PTR]], i32 1
; VECTOR-NEXT:    [[LD0:%.*]] = load <vscale x 2 x i8>, ptr [[PTR0]], align 2
; VECTOR-NEXT:    [[LD1:%.*]] = load <vscale x 2 x i8>, ptr [[PTR1]], align 2
; VECTOR-NEXT:    store <vscale x 2 x i8> [[LD0]], ptr [[PTR0]], align 2
; VECTOR-NEXT:    store <vscale x 2 x i8> [[LD1]], ptr [[PTR1]], align 2
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @scalable_vec
; SCALAR-SAME: (ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr i8, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr i8, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[LD0:%.*]] = load <vscale x 2 x i8>, ptr [[PTR0]], align 2
; SCALAR-NEXT:    [[LD1:%.*]] = load <vscale x 2 x i8>, ptr [[PTR1]], align 2
; SCALAR-NEXT:    store <vscale x 2 x i8> [[LD0]], ptr [[PTR0]], align 2
; SCALAR-NEXT:    store <vscale x 2 x i8> [[LD1]], ptr [[PTR1]], align 2
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr i8, ptr %ptr, i32 0
  %ptr1 = getelementptr i8, ptr %ptr, i32 1
  %ld0 = load <vscale x 2 x i8>, ptr %ptr0
  %ld1 = load <vscale x 2 x i8>, ptr %ptr1
  store <vscale x 2 x i8> %ld0, ptr %ptr0
  store <vscale x 2 x i8> %ld1, ptr %ptr1
  ret void
}
