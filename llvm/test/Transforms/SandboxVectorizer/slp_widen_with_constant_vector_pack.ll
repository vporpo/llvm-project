; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 %s -S | FileCheck %s --check-prefix=SCALAR

; Check that packing constant vectors works as expected.
define void @constant_vector_pack(ptr noalias %ptr, <2 x float> %vec0) {
;
; VECTOR-LABEL: define void @constant_vector_pack(
; VECTOR-SAME: ptr noalias [[PTR:%.*]], <2 x float> [[VEC0:%.*]]) {
; VECTOR-NEXT:    [[XPACK:%.*]] = extractelement <2 x float> [[VEC0]], i64 0
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <4 x float> poison, float [[XPACK]], i64 0
; VECTOR-NEXT:    [[XPACK1:%.*]] = extractelement <2 x float> [[VEC0]], i64 1
; VECTOR-NEXT:    [[PACK2:%.*]] = insertelement <4 x float> [[PACK]], float [[XPACK1]], i64 1
; VECTOR-NEXT:    [[PACK3:%.*]] = insertelement <4 x float> [[PACK2]], float 0.000000e+00, i64 2
; VECTOR-NEXT:    [[PACK4:%.*]] = insertelement <4 x float> [[PACK3]], float 1.000000e+00, i64 3
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    store <4 x float> [[PACK4]], ptr [[PTR0]], align 8
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @constant_vector_pack(
; SCALAR-SAME: ptr noalias [[PTR:%.*]], <2 x float> [[VEC0:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 2
; SCALAR-NEXT:    store <2 x float> [[VEC0]], ptr [[PTR0]], align 8
; SCALAR-NEXT:    store <2 x float> <float 0.000000e+00, float 1.000000e+00>, ptr [[PTR1]], align 8
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 2
  store <2 x float> %vec0, ptr %ptr0
  store <2 x float> <float 0.0, float 1.0>, ptr %ptr1
  ret void
}
