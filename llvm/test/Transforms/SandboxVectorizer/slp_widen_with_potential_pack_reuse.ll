; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 %s -S | FileCheck %s --check-prefix=SCALAR

; TODO: We could emit the pack in bb0 and reuse it across bb1 and bb2.
; This is not currently supported as the vectorizer works within a BB only.
define void @widen_with_potantial_pack_reuse(ptr noalias %ptr, i1 %cond) {
; VECTOR-LABEL: define void @widen_with_potantial_pack_reuse(
; VECTOR-SAME: ptr noalias [[PTR:%.*]], i1 [[COND:%.*]]) {
; VECTOR-NEXT:  bb0:
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[LD0:%.*]] = load float, ptr [[PTR0]], align 4
; VECTOR-NEXT:    br i1 [[COND]], label [[BB1:%.*]], label [[BB2:%.*]]
; VECTOR:       bb1:
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <2 x float> poison, float [[LD0]], i64 0
; VECTOR-NEXT:    [[PACK1:%.*]] = insertelement <2 x float> [[PACK]], float [[LD0]], i64 1
; VECTOR-NEXT:    [[VEC:%.*]] = fsub <2 x float> [[PACK1]], <float 0.000000e+00, float 1.000000e+00>
; VECTOR-NEXT:    store <2 x float> [[VEC]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    ret void
; VECTOR:       bb2:
; VECTOR-NEXT:    [[PACK2:%.*]] = insertelement <2 x float> poison, float [[LD0]], i64 0
; VECTOR-NEXT:    [[PACK3:%.*]] = insertelement <2 x float> [[PACK2]], float [[LD0]], i64 1
; VECTOR-NEXT:    [[VEC4:%.*]] = fsub <2 x float> [[PACK3]], <float 2.000000e+00, float 3.000000e+00>
; VECTOR-NEXT:    store <2 x float> [[VEC4]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @widen_with_potantial_pack_reuse(
; SCALAR-SAME: ptr noalias [[PTR:%.*]], i1 [[COND:%.*]]) {
; SCALAR-NEXT:  bb0:
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[LD0:%.*]] = load float, ptr [[PTR0]], align 4
; SCALAR-NEXT:    br i1 [[COND]], label [[BB1:%.*]], label [[BB2:%.*]]
; SCALAR:       bb1:
; SCALAR-NEXT:    [[SUB0:%.*]] = fsub float [[LD0]], 0.000000e+00
; SCALAR-NEXT:    [[SUB1:%.*]] = fsub float [[LD0]], 1.000000e+00
; SCALAR-NEXT:    store float [[SUB0]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[SUB1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    ret void
; SCALAR:       bb2:
; SCALAR-NEXT:    [[SUB2:%.*]] = fsub float [[LD0]], 2.000000e+00
; SCALAR-NEXT:    [[SUB3:%.*]] = fsub float [[LD0]], 3.000000e+00
; SCALAR-NEXT:    store float [[SUB2]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[SUB3]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    ret void
;
bb0:
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1
  %ld0 = load float, ptr %ptr0
  br i1 %cond, label %bb1, label %bb2

bb1:
  %sub0 = fsub float %ld0, 0.0
  %sub1 = fsub float %ld0, 1.0
  store float %sub0, ptr %ptr0
  store float %sub1, ptr %ptr1
  ret void

bb2:
  %sub2 = fsub float %ld0, 2.0
  %sub3 = fsub float %ld0, 3.0
  store float %sub2, ptr %ptr0
  store float %sub3, ptr %ptr1
  ret void
}
