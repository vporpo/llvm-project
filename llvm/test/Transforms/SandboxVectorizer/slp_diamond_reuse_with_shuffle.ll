; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -passes=sandbox-vectorizer -sbvec-passes=boup-vectorize,accept-or-revert -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-passes=boup-vectorize,accept-or-revert -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 %s -S | FileCheck %s --check-prefix=SCALAR

define void @vector_diamond_reuse_with_shuffle(<2 x float> %arg, ptr %ptr) {
; VECTOR-LABEL: define void @vector_diamond_reuse_with_shuffle(
; VECTOR-SAME: <2 x float> [[ARG:%.*]], ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[XPACK7:%.*]] = extractelement <2 x float> [[ARG]], i64 0
; VECTOR-NEXT:    [[PACK8:%.*]] = insertelement <4 x float> poison, float [[XPACK7]], i64 0
; VECTOR-NEXT:    [[XPACK9:%.*]] = extractelement <2 x float> [[ARG]], i64 1
; VECTOR-NEXT:    [[PACK10:%.*]] = insertelement <4 x float> [[PACK8]], float [[XPACK9]], i64 1
; VECTOR-NEXT:    [[XPACK11:%.*]] = extractelement <2 x float> [[ARG]], i64 0
; VECTOR-NEXT:    [[PACK12:%.*]] = insertelement <4 x float> [[PACK10]], float [[XPACK11]], i64 2
; VECTOR-NEXT:    [[XPACK13:%.*]] = extractelement <2 x float> [[ARG]], i64 1
; VECTOR-NEXT:    [[PACK14:%.*]] = insertelement <4 x float> [[PACK12]], float [[XPACK13]], i64 3
; VECTOR-NEXT:    [[XPACK:%.*]] = extractelement <2 x float> [[ARG]], i64 0
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <4 x float> poison, float [[XPACK]], i64 0
; VECTOR-NEXT:    [[XPACK1:%.*]] = extractelement <2 x float> [[ARG]], i64 1
; VECTOR-NEXT:    [[PACK2:%.*]] = insertelement <4 x float> [[PACK]], float [[XPACK1]], i64 1
; VECTOR-NEXT:    [[XPACK3:%.*]] = extractelement <2 x float> [[ARG]], i64 0
; VECTOR-NEXT:    [[PACK4:%.*]] = insertelement <4 x float> [[PACK2]], float [[XPACK3]], i64 2
; VECTOR-NEXT:    [[XPACK5:%.*]] = extractelement <2 x float> [[ARG]], i64 1
; VECTOR-NEXT:    [[PACK6:%.*]] = insertelement <4 x float> [[PACK4]], float [[XPACK5]], i64 3
; VECTOR-NEXT:    [[VEC:%.*]] = fadd <4 x float> [[PACK6]], [[PACK14]]
; VECTOR-NEXT:    [[SHUF:%.*]] = shufflevector <4 x float> [[VEC]], <4 x float> poison, <4 x i32> <i32 1, i32 1, i32 0, i32 0>
; VECTOR-NEXT:    [[VEC15:%.*]] = fsub <4 x float> [[VEC]], [[SHUF]]
; VECTOR-NEXT:    [[GEP0:%.*]] = getelementptr <2 x float>, ptr [[PTR]], i32 0
; VECTOR-NEXT:    store <4 x float> [[VEC15]], ptr [[GEP0]], align 8
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @vector_diamond_reuse_with_shuffle(
; SCALAR-SAME: <2 x float> [[ARG:%.*]], ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[FADDA:%.*]] = fadd <2 x float> [[ARG]], [[ARG]]
; SCALAR-NEXT:    [[FADDB:%.*]] = fadd <2 x float> [[ARG]], [[ARG]]
; SCALAR-NEXT:    [[FSUB0:%.*]] = fsub <2 x float> [[FADDA]], [[FADDB]]
; SCALAR-NEXT:    [[FSUB1:%.*]] = fsub <2 x float> [[FADDB]], [[FADDA]]
; SCALAR-NEXT:    [[GEP0:%.*]] = getelementptr <2 x float>, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[GEP1:%.*]] = getelementptr <2 x float>, ptr [[PTR]], i32 1
; SCALAR-NEXT:    store <2 x float> [[FSUB0]], ptr [[GEP0]], align 8
; SCALAR-NEXT:    store <2 x float> [[FSUB1]], ptr [[GEP1]], align 8
; SCALAR-NEXT:    ret void
;
  %faddA = fadd <2 x float> %arg, %arg
  %faddB = fadd <2 x float> %arg, %arg

  %fsub0 = fsub <2 x float> %faddA, %faddB
  %fsub1 = fsub <2 x float> %faddB, %faddA

  %gep0 = getelementptr <2 x float>, ptr %ptr, i32 0
  %gep1 = getelementptr <2 x float>, ptr %ptr, i32 1
  store <2 x float> %fsub0, ptr %gep0
  store <2 x float> %fsub1, ptr %gep1
  ret void
}
