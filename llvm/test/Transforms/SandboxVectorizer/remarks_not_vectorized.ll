; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -passes=sandbox-vectorizer -sbvec-cost-threshold=-9999 -sbvec-vec-reg-bits=1024 -pass-remarks-output=%t < %s | FileCheck %s
; RUN: FileCheck --allow-empty --input-file=%t --check-prefix=REMARKS %s

; REMARKS-NOT: .*

; Check that we don't get any remarks when the code isn't vectorized
; but the threshold allows it.
define void @no_remarks1(ptr %ptr) {
; CHECK-LABEL: define void @no_remarks1(
; CHECK-SAME: ptr [[PTR:%.*]]) {
; CHECK-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; CHECK-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 42
; CHECK-NEXT:    [[LD0:%.*]] = load float, ptr [[PTR0]], align 4
; CHECK-NEXT:    [[LD1:%.*]] = load float, ptr [[PTR1]], align 4
; CHECK-NEXT:    store float [[LD0]], ptr [[PTR0]], align 4
; CHECK-NEXT:    store float [[LD1]], ptr [[PTR1]], align 4
; CHECK-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 42
  %ld0 = load float, ptr %ptr0
  %ld1 = load float, ptr %ptr1
  store float %ld0, ptr %ptr0
  store float %ld1, ptr %ptr1
  ret void
}

; Same but doesn't get vectorized because of scheduling.
define void @no_remarks2(ptr %ptr, ptr %ptrX) {
; CHECK-LABEL: define void @no_remarks2(
; CHECK-SAME: ptr [[PTR:%.*]], ptr [[PTRX:%.*]]) {
; CHECK-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; CHECK-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; CHECK-NEXT:    [[LD0:%.*]] = load float, ptr [[PTR0]], align 4
; CHECK-NEXT:    [[LD1:%.*]] = load float, ptr [[PTR1]], align 4
; CHECK-NEXT:    store float [[LD0]], ptr [[PTR0]], align 4
; CHECK-NEXT:    store float 0.000000e+00, ptr [[PTRX]], align 4
; CHECK-NEXT:    store float [[LD1]], ptr [[PTR1]], align 4
; CHECK-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1
  %ld0 = load float, ptr %ptr0
  %ld1 = load float, ptr %ptr1
  store float %ld0, ptr %ptr0
  store float 0.0, ptr %ptrX
  store float %ld1, ptr %ptr1
  ret void
}
