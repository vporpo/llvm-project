; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 %s -S | FileCheck %s --check-prefix=SCALAR
;
;    1.0 l0  0.0 l1
;     \ /      \ /
; 0.0  *   1.0  *
;   \ /      \ /
;    -        -
;    |        |
;    S        S
define void @widen_with_constants(ptr noalias %ptr) {
;
; VECTOR-LABEL: define void @widen_with_constants(
; VECTOR-SAME: ptr noalias [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[VECL:%.*]] = load <2 x float>, ptr [[PTR0]], align 4
; VECTOR-NEXT:    [[VEC:%.*]] = fmul <2 x float> <float 1.000000e+00, float 0.000000e+00>, [[VECL]]
; VECTOR-NEXT:    [[VEC1:%.*]] = fsub <2 x float> <float 0.000000e+00, float 1.000000e+00>, [[VEC]]
; VECTOR-NEXT:    store <2 x float> [[VEC1]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @widen_with_constants(
; SCALAR-SAME: ptr noalias [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[LD0:%.*]] = load float, ptr [[PTR0]], align 4
; SCALAR-NEXT:    [[LD1:%.*]] = load float, ptr [[PTR1]], align 4
; SCALAR-NEXT:    [[FMUL0:%.*]] = fmul float 1.000000e+00, [[LD0]]
; SCALAR-NEXT:    [[FMUL1:%.*]] = fmul float 0.000000e+00, [[LD1]]
; SCALAR-NEXT:    [[SUB0:%.*]] = fsub float 0.000000e+00, [[FMUL0]]
; SCALAR-NEXT:    [[SUB1:%.*]] = fsub float 1.000000e+00, [[FMUL1]]
; SCALAR-NEXT:    store float [[SUB0]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[SUB1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1
  %ld0 = load float, ptr %ptr0
  %ld1 = load float, ptr %ptr1
  %fmul0 = fmul float 1.0, %ld0
  %fmul1 = fmul float 0.0, %ld1
  %sub0 = fsub float 0.0, %fmul0
  %sub1 = fsub float 1.0, %fmul1
  store float %sub0, ptr %ptr0
  store float %sub1, ptr %ptr1
  ret void
}
