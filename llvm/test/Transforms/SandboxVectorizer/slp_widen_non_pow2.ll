; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 -sbvec-allow-non-pow2 %s -S | FileCheck %s --check-prefix=NONPOW2
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 %s -S | FileCheck %s --check-prefix=SCALAR

define void @vf_1_1_1(ptr %ptr) {
; VECTOR-LABEL: define void @vf_1_1_1
; VECTOR-SAME: (ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[PTR2:%.*]] = getelementptr float, ptr [[PTR]], i32 2
; VECTOR-NEXT:    [[VECL:%.*]] = load <2 x float>, ptr [[PTR0]], align 4
; VECTOR-NEXT:    [[LD2:%.*]] = load float, ptr [[PTR2]], align 4
; VECTOR-NEXT:    store <2 x float> [[VECL]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    store float [[LD2]], ptr [[PTR2]], align 4
; VECTOR-NEXT:    ret void
;
; NONPOW2-LABEL: define void @vf_1_1_1
; NONPOW2-SAME: (ptr [[PTR:%.*]]) {
; NONPOW2-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; NONPOW2-NEXT:    [[VECL:%.*]] = load <3 x float>, ptr [[PTR0]], align 4
; NONPOW2-NEXT:    store <3 x float> [[VECL]], ptr [[PTR0]], align 4
; NONPOW2-NEXT:    ret void
;
; SCALAR-LABEL: define void @vf_1_1_1
; SCALAR-SAME: (ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[PTR2:%.*]] = getelementptr float, ptr [[PTR]], i32 2
; SCALAR-NEXT:    [[LD0:%.*]] = load float, ptr [[PTR0]], align 4
; SCALAR-NEXT:    [[LD1:%.*]] = load float, ptr [[PTR1]], align 4
; SCALAR-NEXT:    [[LD2:%.*]] = load float, ptr [[PTR2]], align 4
; SCALAR-NEXT:    store float [[LD0]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[LD1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    store float [[LD2]], ptr [[PTR2]], align 4
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1
  %ptr2 = getelementptr float, ptr %ptr, i32 2
  %ld0 = load float, ptr %ptr0
  %ld1 = load float, ptr %ptr1
  %ld2 = load float, ptr %ptr2
  store float %ld0, ptr %ptr0
  store float %ld1, ptr %ptr1
  store float %ld2, ptr %ptr2
  ret void
}

define void @vf_1_1_1_1(ptr %ptr) {
; VECTOR-LABEL: define void @vf_1_1_1_1
; VECTOR-SAME: (ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[VECL:%.*]] = load <4 x float>, ptr [[PTR0]], align 4
; VECTOR-NEXT:    store <4 x float> [[VECL]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    ret void
;
; NONPOW2-LABEL: define void @vf_1_1_1_1
; NONPOW2-SAME: (ptr [[PTR:%.*]]) {
; NONPOW2-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; NONPOW2-NEXT:    [[VECL:%.*]] = load <4 x float>, ptr [[PTR0]], align 4
; NONPOW2-NEXT:    store <4 x float> [[VECL]], ptr [[PTR0]], align 4
; NONPOW2-NEXT:    ret void
;
; SCALAR-LABEL: define void @vf_1_1_1_1
; SCALAR-SAME: (ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[PTR2:%.*]] = getelementptr float, ptr [[PTR]], i32 2
; SCALAR-NEXT:    [[PTR3:%.*]] = getelementptr float, ptr [[PTR]], i32 3
; SCALAR-NEXT:    [[LD0:%.*]] = load float, ptr [[PTR0]], align 4
; SCALAR-NEXT:    [[LD1:%.*]] = load float, ptr [[PTR1]], align 4
; SCALAR-NEXT:    [[LD2:%.*]] = load float, ptr [[PTR2]], align 4
; SCALAR-NEXT:    [[LD3:%.*]] = load float, ptr [[PTR3]], align 4
; SCALAR-NEXT:    store float [[LD0]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[LD1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    store float [[LD2]], ptr [[PTR2]], align 4
; SCALAR-NEXT:    store float [[LD3]], ptr [[PTR3]], align 4
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1
  %ptr2 = getelementptr float, ptr %ptr, i32 2
  %ptr3 = getelementptr float, ptr %ptr, i32 3
  %ld0 = load float, ptr %ptr0
  %ld1 = load float, ptr %ptr1
  %ld2 = load float, ptr %ptr2
  %ld3 = load float, ptr %ptr3
  store float %ld0, ptr %ptr0
  store float %ld1, ptr %ptr1
  store float %ld2, ptr %ptr2
  store float %ld3, ptr %ptr3
  ret void
}

define void @vf_1_2(ptr %ptr) {
; VECTOR-LABEL: define void @vf_1_2
; VECTOR-SAME: (ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; VECTOR-NEXT:    [[LD0:%.*]] = load float, ptr [[PTR0]], align 4
; VECTOR-NEXT:    [[LD1:%.*]] = load <2 x float>, ptr [[PTR1]], align 8
; VECTOR-NEXT:    store float [[LD0]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    store <2 x float> [[LD1]], ptr [[PTR1]], align 8
; VECTOR-NEXT:    ret void
;
; NONPOW2-LABEL: define void @vf_1_2
; NONPOW2-SAME: (ptr [[PTR:%.*]]) {
; NONPOW2-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; NONPOW2-NEXT:    [[VECL:%.*]] = load <3 x float>, ptr [[PTR0]], align 4
; NONPOW2-NEXT:    store <3 x float> [[VECL]], ptr [[PTR0]], align 4
; NONPOW2-NEXT:    ret void
;
; SCALAR-LABEL: define void @vf_1_2
; SCALAR-SAME: (ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[LD0:%.*]] = load float, ptr [[PTR0]], align 4
; SCALAR-NEXT:    [[LD1:%.*]] = load <2 x float>, ptr [[PTR1]], align 8
; SCALAR-NEXT:    store float [[LD0]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store <2 x float> [[LD1]], ptr [[PTR1]], align 8
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1
  %ld0 = load float, ptr %ptr0
  %ld1 = load <2 x float>, ptr %ptr1
  store float %ld0, ptr %ptr0
  store <2 x float> %ld1, ptr %ptr1
  ret void
}

define void @vf_1_1_2(ptr %ptr) {
; VECTOR-LABEL: define void @vf_1_1_2
; VECTOR-SAME: (ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[VECL:%.*]] = load <4 x float>, ptr [[PTR0]], align 4
; VECTOR-NEXT:    store <4 x float> [[VECL]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    ret void
;
; NONPOW2-LABEL: define void @vf_1_1_2
; NONPOW2-SAME: (ptr [[PTR:%.*]]) {
; NONPOW2-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; NONPOW2-NEXT:    [[VECL:%.*]] = load <4 x float>, ptr [[PTR0]], align 4
; NONPOW2-NEXT:    store <4 x float> [[VECL]], ptr [[PTR0]], align 4
; NONPOW2-NEXT:    ret void
;
; SCALAR-LABEL: define void @vf_1_1_2
; SCALAR-SAME: (ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[PTR2:%.*]] = getelementptr float, ptr [[PTR]], i32 2
; SCALAR-NEXT:    [[LD0:%.*]] = load float, ptr [[PTR0]], align 4
; SCALAR-NEXT:    [[LD1:%.*]] = load float, ptr [[PTR1]], align 4
; SCALAR-NEXT:    [[LD2:%.*]] = load <2 x float>, ptr [[PTR2]], align 8
; SCALAR-NEXT:    store float [[LD0]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[LD1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    store <2 x float> [[LD2]], ptr [[PTR2]], align 8
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1
  %ptr2 = getelementptr float, ptr %ptr, i32 2
  %ld0 = load float, ptr %ptr0
  %ld1 = load float, ptr %ptr1
  %ld2 = load <2 x float>, ptr %ptr2
  store float %ld0, ptr %ptr0
  store float %ld1, ptr %ptr1
  store <2 x float> %ld2, ptr %ptr2
  ret void
}

define void @vf_3_1(ptr %ptr) {
; VECTOR-LABEL: define void @vf_3_1
; VECTOR-SAME: (ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[VECL:%.*]] = load <4 x float>, ptr [[PTR0]], align 16
; VECTOR-NEXT:    store <4 x float> [[VECL]], ptr [[PTR0]], align 16
; VECTOR-NEXT:    ret void
;
; NONPOW2-LABEL: define void @vf_3_1
; NONPOW2-SAME: (ptr [[PTR:%.*]]) {
; NONPOW2-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; NONPOW2-NEXT:    [[VECL:%.*]] = load <4 x float>, ptr [[PTR0]], align 16
; NONPOW2-NEXT:    store <4 x float> [[VECL]], ptr [[PTR0]], align 16
; NONPOW2-NEXT:    ret void
;
; SCALAR-LABEL: define void @vf_3_1
; SCALAR-SAME: (ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 3
; SCALAR-NEXT:    [[LD0:%.*]] = load <3 x float>, ptr [[PTR0]], align 16
; SCALAR-NEXT:    [[LD1:%.*]] = load float, ptr [[PTR1]], align 4
; SCALAR-NEXT:    store <3 x float> [[LD0]], ptr [[PTR0]], align 16
; SCALAR-NEXT:    store float [[LD1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 3
  %ld0 = load <3 x float>, ptr %ptr0
  %ld1 = load float, ptr %ptr1
  store <3 x float> %ld0, ptr %ptr0
  store float %ld1, ptr %ptr1
  ret void
}

define void @vf_2_2(ptr %ptr) {
; VECTOR-LABEL: define void @vf_2_2
; VECTOR-SAME: (ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[VECL:%.*]] = load <4 x float>, ptr [[PTR0]], align 8
; VECTOR-NEXT:    store <4 x float> [[VECL]], ptr [[PTR0]], align 8
; VECTOR-NEXT:    ret void
;
; NONPOW2-LABEL: define void @vf_2_2
; NONPOW2-SAME: (ptr [[PTR:%.*]]) {
; NONPOW2-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; NONPOW2-NEXT:    [[VECL:%.*]] = load <4 x float>, ptr [[PTR0]], align 8
; NONPOW2-NEXT:    store <4 x float> [[VECL]], ptr [[PTR0]], align 8
; NONPOW2-NEXT:    ret void
;
; SCALAR-LABEL: define void @vf_2_2
; SCALAR-SAME: (ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 2
; SCALAR-NEXT:    [[LD0:%.*]] = load <2 x float>, ptr [[PTR0]], align 8
; SCALAR-NEXT:    [[LD1:%.*]] = load <2 x float>, ptr [[PTR1]], align 8
; SCALAR-NEXT:    store <2 x float> [[LD0]], ptr [[PTR0]], align 8
; SCALAR-NEXT:    store <2 x float> [[LD1]], ptr [[PTR1]], align 8
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 2
  %ld0 = load <2 x float>, ptr %ptr0
  %ld1 = load <2 x float>, ptr %ptr1
  store <2 x float> %ld0, ptr %ptr0
  store <2 x float> %ld1, ptr %ptr1
  ret void
}

define void @vf_3_2(ptr %ptr) {
; VECTOR-LABEL: define void @vf_3_2
; VECTOR-SAME: (ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 3
; VECTOR-NEXT:    [[LD0:%.*]] = load <3 x float>, ptr [[PTR0]], align 16
; VECTOR-NEXT:    [[LD1:%.*]] = load <2 x float>, ptr [[PTR1]], align 8
; VECTOR-NEXT:    store <3 x float> [[LD0]], ptr [[PTR0]], align 16
; VECTOR-NEXT:    store <2 x float> [[LD1]], ptr [[PTR1]], align 8
; VECTOR-NEXT:    ret void
;
; NONPOW2-LABEL: define void @vf_3_2
; NONPOW2-SAME: (ptr [[PTR:%.*]]) {
; NONPOW2-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; NONPOW2-NEXT:    [[VECL:%.*]] = load <5 x float>, ptr [[PTR0]], align 16
; NONPOW2-NEXT:    store <5 x float> [[VECL]], ptr [[PTR0]], align 16
; NONPOW2-NEXT:    ret void
;
; SCALAR-LABEL: define void @vf_3_2
; SCALAR-SAME: (ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 3
; SCALAR-NEXT:    [[LD0:%.*]] = load <3 x float>, ptr [[PTR0]], align 16
; SCALAR-NEXT:    [[LD1:%.*]] = load <2 x float>, ptr [[PTR1]], align 8
; SCALAR-NEXT:    store <3 x float> [[LD0]], ptr [[PTR0]], align 16
; SCALAR-NEXT:    store <2 x float> [[LD1]], ptr [[PTR1]], align 8
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 3
  %ld0 = load <3 x float>, ptr %ptr0
  %ld1 = load <2 x float>, ptr %ptr1
  store <3 x float> %ld0, ptr %ptr0
  store <2 x float> %ld1, ptr %ptr1
  ret void
}

define void @vf_16_16(ptr %ptr) {
; VECTOR-LABEL: define void @vf_16_16
; VECTOR-SAME: (ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 16
; VECTOR-NEXT:    [[LD0:%.*]] = load <16 x float>, ptr [[PTR0]], align 64
; VECTOR-NEXT:    [[LD1:%.*]] = load <16 x float>, ptr [[PTR1]], align 64
; VECTOR-NEXT:    store <16 x float> [[LD0]], ptr [[PTR0]], align 64
; VECTOR-NEXT:    store <16 x float> [[LD1]], ptr [[PTR1]], align 64
; VECTOR-NEXT:    ret void
;
; NONPOW2-LABEL: define void @vf_16_16
; NONPOW2-SAME: (ptr [[PTR:%.*]]) {
; NONPOW2-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; NONPOW2-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 16
; NONPOW2-NEXT:    [[LD0:%.*]] = load <16 x float>, ptr [[PTR0]], align 64
; NONPOW2-NEXT:    [[LD1:%.*]] = load <16 x float>, ptr [[PTR1]], align 64
; NONPOW2-NEXT:    store <16 x float> [[LD0]], ptr [[PTR0]], align 64
; NONPOW2-NEXT:    store <16 x float> [[LD1]], ptr [[PTR1]], align 64
; NONPOW2-NEXT:    ret void
;
; SCALAR-LABEL: define void @vf_16_16
; SCALAR-SAME: (ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 16
; SCALAR-NEXT:    [[LD0:%.*]] = load <16 x float>, ptr [[PTR0]], align 64
; SCALAR-NEXT:    [[LD1:%.*]] = load <16 x float>, ptr [[PTR1]], align 64
; SCALAR-NEXT:    store <16 x float> [[LD0]], ptr [[PTR0]], align 64
; SCALAR-NEXT:    store <16 x float> [[LD1]], ptr [[PTR1]], align 64
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 16
  %ld0 = load <16 x float>, ptr %ptr0
  %ld1 = load <16 x float>, ptr %ptr1
  store <16 x float> %ld0, ptr %ptr0
  store <16 x float> %ld1, ptr %ptr1
  ret void
}


define void @vf_2_2_1_4(ptr %ptr) {
; VECTOR-LABEL: define void @vf_2_2_1_4
; VECTOR-SAME: (ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[PTR2:%.*]] = getelementptr float, ptr [[PTR]], i32 4
; VECTOR-NEXT:    [[PTR3:%.*]] = getelementptr float, ptr [[PTR]], i32 5
; VECTOR-NEXT:    [[VECL:%.*]] = load <4 x float>, ptr [[PTR0]], align 8
; VECTOR-NEXT:    [[LD2:%.*]] = load float, ptr [[PTR2]], align 4
; VECTOR-NEXT:    [[LD3:%.*]] = load <4 x float>, ptr [[PTR3]], align 16
; VECTOR-NEXT:    store <4 x float> [[VECL]], ptr [[PTR0]], align 8
; VECTOR-NEXT:    store float [[LD2]], ptr [[PTR2]], align 4
; VECTOR-NEXT:    store <4 x float> [[LD3]], ptr [[PTR3]], align 16
; VECTOR-NEXT:    ret void
;
; NONPOW2-LABEL: define void @vf_2_2_1_4
; NONPOW2-SAME: (ptr [[PTR:%.*]]) {
; NONPOW2-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; NONPOW2-NEXT:    [[VECL:%.*]] = load <9 x float>, ptr [[PTR0]], align 8
; NONPOW2-NEXT:    store <9 x float> [[VECL]], ptr [[PTR0]], align 8
; NONPOW2-NEXT:    ret void
;
; SCALAR-LABEL: define void @vf_2_2_1_4
; SCALAR-SAME: (ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 2
; SCALAR-NEXT:    [[PTR2:%.*]] = getelementptr float, ptr [[PTR]], i32 4
; SCALAR-NEXT:    [[PTR3:%.*]] = getelementptr float, ptr [[PTR]], i32 5
; SCALAR-NEXT:    [[LD0:%.*]] = load <2 x float>, ptr [[PTR0]], align 8
; SCALAR-NEXT:    [[LD1:%.*]] = load <2 x float>, ptr [[PTR1]], align 8
; SCALAR-NEXT:    [[LD2:%.*]] = load float, ptr [[PTR2]], align 4
; SCALAR-NEXT:    [[LD3:%.*]] = load <4 x float>, ptr [[PTR3]], align 16
; SCALAR-NEXT:    store <2 x float> [[LD0]], ptr [[PTR0]], align 8
; SCALAR-NEXT:    store <2 x float> [[LD1]], ptr [[PTR1]], align 8
; SCALAR-NEXT:    store float [[LD2]], ptr [[PTR2]], align 4
; SCALAR-NEXT:    store <4 x float> [[LD3]], ptr [[PTR3]], align 16
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 2
  %ptr2 = getelementptr float, ptr %ptr, i32 4
  %ptr3 = getelementptr float, ptr %ptr, i32 5
  %ld0 = load <2 x float>, ptr %ptr0
  %ld1 = load <2 x float>, ptr %ptr1
  %ld2 = load float, ptr %ptr2
  %ld3 = load <4 x float>, ptr %ptr3
  store <2 x float> %ld0, ptr %ptr0
  store <2 x float> %ld1, ptr %ptr1
  store float %ld2, ptr %ptr2
  store <4 x float> %ld3, ptr %ptr3
  ret void
}
