; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 %s -S | FileCheck %s --check-prefix=SCALAR
;
; l0  l10  l1  l11
;  \ /      \ /
;   -  l11   -  l0
;    \ /      \ /
;     -        -
;     |        |
;     S        S
define void @partial_match(ptr noalias %ptr) {
;
; VECTOR-LABEL: define void @partial_match(
; VECTOR-SAME: ptr noalias [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[PTR10:%.*]] = getelementptr float, ptr [[PTR]], i32 10
; VECTOR-NEXT:    [[VECL:%.*]] = load <2 x float>, ptr [[PTR0]], align 4
; VECTOR-NEXT:    [[UNPACK2:%.*]] = extractelement <2 x float> [[VECL]], i64 0
; VECTOR-NEXT:    [[VECL1:%.*]] = load <2 x float>, ptr [[PTR10]], align 4
; VECTOR-NEXT:    [[UNPACK:%.*]] = extractelement <2 x float> [[VECL1]], i64 1
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <2 x float> poison, float [[UNPACK]], i64 0
; VECTOR-NEXT:    [[PACK3:%.*]] = insertelement <2 x float> [[PACK]], float [[UNPACK2]], i64 1
; VECTOR-NEXT:    [[VEC:%.*]] = fsub <2 x float> [[VECL]], [[VECL1]]
; VECTOR-NEXT:    [[VEC4:%.*]] = fsub <2 x float> [[VEC]], [[PACK3]]
; VECTOR-NEXT:    store <2 x float> [[VEC4]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @partial_match(
; SCALAR-SAME: ptr noalias [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[PTR10:%.*]] = getelementptr float, ptr [[PTR]], i32 10
; SCALAR-NEXT:    [[PTR11:%.*]] = getelementptr float, ptr [[PTR]], i32 11
; SCALAR-NEXT:    [[LD0:%.*]] = load float, ptr [[PTR0]], align 4
; SCALAR-NEXT:    [[LD1:%.*]] = load float, ptr [[PTR1]], align 4
; SCALAR-NEXT:    [[LD10:%.*]] = load float, ptr [[PTR10]], align 4
; SCALAR-NEXT:    [[LD11:%.*]] = load float, ptr [[PTR11]], align 4
; SCALAR-NEXT:    [[SB0:%.*]] = fsub float [[LD0]], [[LD10]]
; SCALAR-NEXT:    [[SB1:%.*]] = fsub float [[LD1]], [[LD11]]
; SCALAR-NEXT:    [[SUB0:%.*]] = fsub float [[SB0]], [[LD11]]
; SCALAR-NEXT:    [[SUB1:%.*]] = fsub float [[SB1]], [[LD0]]
; SCALAR-NEXT:    store float [[SUB0]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[SUB1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1
  %ptr10 = getelementptr float, ptr %ptr, i32 10
  %ptr11 = getelementptr float, ptr %ptr, i32 11

  %ld0 = load float, ptr %ptr0
  %ld1 = load float, ptr %ptr1
  %ld10 = load float, ptr %ptr10
  %ld11 = load float, ptr %ptr11

  %sb0 = fsub float %ld0, %ld10
  %sb1 = fsub float %ld1, %ld11

  %sub0 = fsub float %sb0, %ld11
  %sub1 = fsub float %sb1, %ld0

  store float %sub0, ptr %ptr0
  store float %sub1, ptr %ptr1
  ret void
}
