; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 %s -S | FileCheck %s --check-prefix=SCALAR

define float @widen_pack_schedule(ptr %ptr) {
;
; VECTOR-LABEL: define float @widen_pack_schedule(
; VECTOR-SAME: ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[LD0:%.*]] = load float, ptr [[PTR0]], align 4
; VECTOR-NEXT:    [[PTR2:%.*]] = getelementptr float, ptr [[PTR]], i32 2
; VECTOR-NEXT:    [[LD1:%.*]] = load float, ptr [[PTR2]], align 4
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <2 x float> poison, float [[LD0]], i64 0
; VECTOR-NEXT:    [[PACK1:%.*]] = insertelement <2 x float> [[PACK]], float [[LD1]], i64 1
; VECTOR-NEXT:    store <2 x float> [[PACK1]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    [[BARRIER_LD:%.*]] = load float, ptr [[PTR0]], align 4
; VECTOR-NEXT:    ret float [[BARRIER_LD]]
;
; SCALAR-LABEL: define float @widen_pack_schedule(
; SCALAR-SAME: ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[LD0:%.*]] = load float, ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[LD0]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    [[BARRIER_LD:%.*]] = load float, ptr [[PTR0]], align 4
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[PTR2:%.*]] = getelementptr float, ptr [[PTR]], i32 2
; SCALAR-NEXT:    [[LD1:%.*]] = load float, ptr [[PTR2]], align 4
; SCALAR-NEXT:    store float [[LD1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    ret float [[BARRIER_LD]]
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ld0 = load float, ptr %ptr0
  store float %ld0, ptr %ptr0

  %barrier_ld = load float, ptr %ptr0

  %ptr1 = getelementptr float, ptr %ptr, i32 1
  %ptr2 = getelementptr float, ptr %ptr, i32 2
  %ld1 = load float, ptr %ptr2
  store float %ld1, ptr %ptr1
  ret float %barrier_ld
}

