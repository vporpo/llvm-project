; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 -sbvec-passes=boup-vectorize,vectorize-packs %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 -sbvec-passes=boup-vectorize,vectorize-packs %s -S | FileCheck %s --check-prefix=SCALAR
;
;            ld10 0.0 ld11 1.0
;                \ /    \ /
;  ld0    ld1     -      -
;   |      |      |      |
;   S      S      S      S
define void @widen_with_change_width(ptr noalias %ptr) {
;
; VECTOR-LABEL: define void @widen_with_change_width(
; VECTOR-SAME: ptr noalias [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[PTR10:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[VECL7:%.*]] = load <2 x float>, ptr [[PTR10]], align 4
; VECTOR-NEXT:    [[VEC:%.*]] = fsub <2 x float> [[VECL7]], <float 0.000000e+00, float 1.000000e+00>
; VECTOR-NEXT:    [[UNPACK11:%.*]] = extractelement <2 x float> [[VEC]], i64 1
; VECTOR-NEXT:    [[UNPACK10:%.*]] = extractelement <2 x float> [[VEC]], i64 0
; VECTOR-NEXT:    [[UNPACK9:%.*]] = extractelement <2 x float> [[VEC]], i64 1
; VECTOR-NEXT:    [[UNPACK8:%.*]] = extractelement <2 x float> [[VEC]], i64 0
; VECTOR-NEXT:    [[VECL:%.*]] = load <2 x float>, ptr [[PTR0]], align 4
; VECTOR-NEXT:    [[UNPACK6:%.*]] = extractelement <2 x float> [[VECL]], i64 1
; VECTOR-NEXT:    [[UNPACK5:%.*]] = extractelement <2 x float> [[VECL]], i64 0
; VECTOR-NEXT:    [[UNPACK4:%.*]] = extractelement <2 x float> [[VECL]], i64 1
; VECTOR-NEXT:    [[UNPACK:%.*]] = extractelement <2 x float> [[VECL]], i64 0
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <4 x float> poison, float [[UNPACK5]], i64 0
; VECTOR-NEXT:    [[PACK1:%.*]] = insertelement <4 x float> [[PACK]], float [[UNPACK6]], i64 1
; VECTOR-NEXT:    [[PACK2:%.*]] = insertelement <4 x float> [[PACK1]], float [[UNPACK10]], i64 2
; VECTOR-NEXT:    [[PACK3:%.*]] = insertelement <4 x float> [[PACK2]], float [[UNPACK11]], i64 3
; VECTOR-NEXT:    store <4 x float> [[PACK3]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @widen_with_change_width(
; SCALAR-SAME: ptr noalias [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[PTR2:%.*]] = getelementptr float, ptr [[PTR]], i32 2
; SCALAR-NEXT:    [[PTR3:%.*]] = getelementptr float, ptr [[PTR]], i32 3
; SCALAR-NEXT:    [[PTR10:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR11:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[LD10:%.*]] = load float, ptr [[PTR10]], align 4
; SCALAR-NEXT:    [[LD11:%.*]] = load float, ptr [[PTR11]], align 4
; SCALAR-NEXT:    [[SUB0:%.*]] = fsub float [[LD10]], 0.000000e+00
; SCALAR-NEXT:    [[SUB1:%.*]] = fsub float [[LD11]], 1.000000e+00
; SCALAR-NEXT:    [[LD0:%.*]] = load float, ptr [[PTR0]], align 4
; SCALAR-NEXT:    [[LD1:%.*]] = load float, ptr [[PTR1]], align 4
; SCALAR-NEXT:    store float [[LD0]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[LD1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    store float [[SUB0]], ptr [[PTR2]], align 4
; SCALAR-NEXT:    store float [[SUB1]], ptr [[PTR3]], align 4
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1
  %ptr2 = getelementptr float, ptr %ptr, i32 2
  %ptr3 = getelementptr float, ptr %ptr, i32 3

  %ptr10 = getelementptr float, ptr %ptr, i32 0
  %ptr11 = getelementptr float, ptr %ptr, i32 1

  %ld10 = load float, ptr %ptr10
  %ld11 = load float, ptr %ptr11

  %sub0 = fsub float %ld10, 0.0
  %sub1 = fsub float %ld11, 1.0

  %ld0 = load float, ptr %ptr0
  %ld1 = load float, ptr %ptr1

  store float %ld0, ptr %ptr0
  store float %ld1, ptr %ptr1
  store float %sub0, ptr %ptr2
  store float %sub1, ptr %ptr3
  ret void
}
