; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 %s -S | FileCheck %s --check-prefix=SCALAR
;
; l0 0.0  l1 l0
;  \ /     \ /
;   -       -
;   |       |
;   S       S
define void @widen_with_constants(ptr noalias %ptr) {
;
; VECTOR-LABEL: define void @widen_with_constants(
; VECTOR-SAME: ptr noalias [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[VECL:%.*]] = load <2 x float>, ptr [[PTR0]], align 4
; VECTOR-NEXT:    [[UNPACK:%.*]] = extractelement <2 x float> [[VECL]], i64 0
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <2 x float> <float 0.000000e+00, float poison>, float [[UNPACK]], i64 1
; VECTOR-NEXT:    [[VEC:%.*]] = fsub <2 x float> [[VECL]], [[PACK]]
; VECTOR-NEXT:    store <2 x float> [[VEC]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @widen_with_constants(
; SCALAR-SAME: ptr noalias [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[LD0:%.*]] = load float, ptr [[PTR0]], align 4
; SCALAR-NEXT:    [[LD1:%.*]] = load float, ptr [[PTR1]], align 4
; SCALAR-NEXT:    [[SUB0:%.*]] = fsub float [[LD0]], 0.000000e+00
; SCALAR-NEXT:    [[SUB1:%.*]] = fsub float [[LD1]], [[LD0]]
; SCALAR-NEXT:    store float [[SUB0]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[SUB1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1

  %ld0 = load float, ptr %ptr0
  %ld1 = load float, ptr %ptr1
  %sub0 = fsub float %ld0, 0.0
  %sub1 = fsub float %ld1, %ld0
  store float %sub0, ptr %ptr0
  store float %sub1, ptr %ptr1
  ret void
}
