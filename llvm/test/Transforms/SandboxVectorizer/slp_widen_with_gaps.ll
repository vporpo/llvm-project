; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR

; Checks how we handle stores with gaps.


define void @elm_i32_gap_3xi8(ptr %ptr) {
; VECTOR-LABEL: define void @elm_i32_gap_3xi8(
; VECTOR-SAME: ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr i8, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[PTR1:%.*]] = getelementptr i8, ptr [[PTR]], i32 3
; VECTOR-NEXT:    store i32 0, ptr [[PTR0]], align 1
; VECTOR-NEXT:    store i32 1, ptr [[PTR1]], align 1
; VECTOR-NEXT:    ret void
;
  %ptr0 = getelementptr i8, ptr %ptr, i32 0
  %ptr1 = getelementptr i8, ptr %ptr, i32 3
  store i32 0, ptr %ptr0, align 1
  store i32 1, ptr %ptr1, align 1
  ret void
}

define void @elm_i32_gap_4xi8(ptr %ptr) {
; VECTOR-LABEL: define void @elm_i32_gap_4xi8(
; VECTOR-SAME: ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr i8, ptr [[PTR]], i32 0
; VECTOR-NEXT:    store <2 x i32> <i32 0, i32 1>, ptr [[PTR0]], align 1
; VECTOR-NEXT:    ret void
;
  %ptr0 = getelementptr i8, ptr %ptr, i32 0
  %ptr1 = getelementptr i8, ptr %ptr, i32 4
  store i32 0, ptr %ptr0, align 1
  store i32 1, ptr %ptr1, align 1
  ret void
}

define void @elm_i32_gap_5xi8(ptr %ptr) {
; VECTOR-LABEL: define void @elm_i32_gap_5xi8(
; VECTOR-SAME: ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr i8, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[PTR1:%.*]] = getelementptr i8, ptr [[PTR]], i32 5
; VECTOR-NEXT:    store i32 0, ptr [[PTR0]], align 1
; VECTOR-NEXT:    store i32 1, ptr [[PTR1]], align 1
; VECTOR-NEXT:    ret void
;
  %ptr0 = getelementptr i8, ptr %ptr, i32 0
  %ptr1 = getelementptr i8, ptr %ptr, i32 5
  store i32 0, ptr %ptr0, align 1
  store i32 1, ptr %ptr1, align 1
  ret void
}

define void @elm_i32_gap_6xi8(ptr %ptr) {
; VECTOR-LABEL: define void @elm_i32_gap_6xi8(
; VECTOR-SAME: ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr i8, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[PTR1:%.*]] = getelementptr i8, ptr [[PTR]], i32 6
; VECTOR-NEXT:    store i32 0, ptr [[PTR0]], align 1
; VECTOR-NEXT:    store i32 1, ptr [[PTR1]], align 1
; VECTOR-NEXT:    ret void
;
  %ptr0 = getelementptr i8, ptr %ptr, i32 0
  %ptr1 = getelementptr i8, ptr %ptr, i32 6
  store i32 0, ptr %ptr0, align 1
  store i32 1, ptr %ptr1, align 1
  ret void
}

define void @elm_i32_gap_7xi8(ptr %ptr) {
; VECTOR-LABEL: define void @elm_i32_gap_7xi8(
; VECTOR-SAME: ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr i8, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[PTR1:%.*]] = getelementptr i8, ptr [[PTR]], i32 7
; VECTOR-NEXT:    store i32 0, ptr [[PTR0]], align 1
; VECTOR-NEXT:    store i32 1, ptr [[PTR1]], align 1
; VECTOR-NEXT:    ret void
;
  %ptr0 = getelementptr i8, ptr %ptr, i32 0
  %ptr1 = getelementptr i8, ptr %ptr, i32 7
  store i32 0, ptr %ptr0, align 1
  store i32 1, ptr %ptr1, align 1
  ret void
}

define void @elm_i32_gap_8xi8(ptr %ptr) {
; VECTOR-LABEL: define void @elm_i32_gap_8xi8(
; VECTOR-SAME: ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr i8, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[PTR1:%.*]] = getelementptr i8, ptr [[PTR]], i32 8
; VECTOR-NEXT:    store i32 0, ptr [[PTR0]], align 1
; VECTOR-NEXT:    store i32 1, ptr [[PTR1]], align 1
; VECTOR-NEXT:    ret void
;
  %ptr0 = getelementptr i8, ptr %ptr, i32 0
  %ptr1 = getelementptr i8, ptr %ptr, i32 8
  store i32 0, ptr %ptr0, align 1
  store i32 1, ptr %ptr1, align 1
  ret void
}

