; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 -sbvec-force-seeds=stores %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 -sbvec-force-seeds=stores %s -S | FileCheck %s --check-prefix=SCALAR

define void @widen_vector_selects_scalar_cond(ptr %ptr) {
; VECTOR-LABEL: define void @widen_vector_selects_scalar_cond
; VECTOR-SAME: (ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr <2 x float>, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[PTR1:%.*]] = getelementptr <2 x float>, ptr [[PTR]], i32 1
; VECTOR-NEXT:    [[CPTR0:%.*]] = getelementptr i1, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[CPTR1:%.*]] = getelementptr i1, ptr [[PTR]], i32 1
; VECTOR-NEXT:    [[LHS0:%.*]] = load <2 x float>, ptr [[PTR0]], align 8
; VECTOR-NEXT:    [[LHS1:%.*]] = load <2 x float>, ptr [[PTR1]], align 8
; VECTOR-NEXT:    [[RHS0:%.*]] = load <2 x float>, ptr [[PTR0]], align 8
; VECTOR-NEXT:    [[RHS1:%.*]] = load <2 x float>, ptr [[PTR1]], align 8
; VECTOR-NEXT:    [[C0:%.*]] = load i1, ptr [[CPTR0]], align 1
; VECTOR-NEXT:    [[C1:%.*]] = load i1, ptr [[CPTR1]], align 1
; VECTOR-NEXT:    [[SEL0:%.*]] = select i1 [[C0]], <2 x float> [[LHS0]], <2 x float> [[RHS0]]
; VECTOR-NEXT:    [[SEL1:%.*]] = select i1 [[C1]], <2 x float> [[LHS1]], <2 x float> [[RHS1]]
; VECTOR-NEXT:    [[XPACK:%.*]] = extractelement <2 x float> [[SEL0]], i64 0
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <4 x float> poison, float [[XPACK]], i64 0
; VECTOR-NEXT:    [[XPACK1:%.*]] = extractelement <2 x float> [[SEL0]], i64 1
; VECTOR-NEXT:    [[PACK2:%.*]] = insertelement <4 x float> [[PACK]], float [[XPACK1]], i64 1
; VECTOR-NEXT:    [[XPACK3:%.*]] = extractelement <2 x float> [[SEL1]], i64 0
; VECTOR-NEXT:    [[PACK4:%.*]] = insertelement <4 x float> [[PACK2]], float [[XPACK3]], i64 2
; VECTOR-NEXT:    [[XPACK5:%.*]] = extractelement <2 x float> [[SEL1]], i64 1
; VECTOR-NEXT:    [[PACK6:%.*]] = insertelement <4 x float> [[PACK4]], float [[XPACK5]], i64 3
; VECTOR-NEXT:    store <4 x float> [[PACK6]], ptr [[PTR0]], align 8
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @widen_vector_selects_scalar_cond
; SCALAR-SAME: (ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr <2 x float>, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr <2 x float>, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[CPTR0:%.*]] = getelementptr i1, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[CPTR1:%.*]] = getelementptr i1, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[LHS0:%.*]] = load <2 x float>, ptr [[PTR0]], align 8
; SCALAR-NEXT:    [[LHS1:%.*]] = load <2 x float>, ptr [[PTR1]], align 8
; SCALAR-NEXT:    [[RHS0:%.*]] = load <2 x float>, ptr [[PTR0]], align 8
; SCALAR-NEXT:    [[RHS1:%.*]] = load <2 x float>, ptr [[PTR1]], align 8
; SCALAR-NEXT:    [[C0:%.*]] = load i1, ptr [[CPTR0]], align 1
; SCALAR-NEXT:    [[C1:%.*]] = load i1, ptr [[CPTR1]], align 1
; SCALAR-NEXT:    [[SEL0:%.*]] = select i1 [[C0]], <2 x float> [[LHS0]], <2 x float> [[RHS0]]
; SCALAR-NEXT:    [[SEL1:%.*]] = select i1 [[C1]], <2 x float> [[LHS1]], <2 x float> [[RHS1]]
; SCALAR-NEXT:    store <2 x float> [[SEL0]], ptr [[PTR0]], align 8
; SCALAR-NEXT:    store <2 x float> [[SEL1]], ptr [[PTR1]], align 8
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr <2 x float>, ptr %ptr, i32 0
  %ptr1 = getelementptr <2 x float>, ptr %ptr, i32 1
  %cptr0 = getelementptr i1, ptr %ptr, i32 0
  %cptr1 = getelementptr i1, ptr %ptr, i32 1

  %lhs0 = load <2 x float>, ptr %ptr0
  %lhs1 = load <2 x float>, ptr %ptr1

  %rhs0 = load <2 x float>, ptr %ptr0
  %rhs1 = load <2 x float>, ptr %ptr1

  %c0 = load i1, ptr %cptr0
  %c1 = load i1, ptr %cptr1

  %sel0 = select i1 %c0, <2 x float> %lhs0, <2 x float> %rhs0
  %sel1 = select i1 %c1, <2 x float> %lhs1, <2 x float> %rhs1

  store <2 x float> %sel0, ptr %ptr0
  store <2 x float> %sel1, ptr %ptr1
  ret void
}

define void @widen_vector_selects_vector_cond(ptr %ptr) {
; VECTOR-LABEL: define void @widen_vector_selects_vector_cond
; VECTOR-SAME: (ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr <2 x float>, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[CPTR0:%.*]] = getelementptr <2 x i1>, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[CPTR1:%.*]] = getelementptr <2 x i1>, ptr [[PTR]], i32 1
; VECTOR-NEXT:    [[VECL:%.*]] = load <4 x float>, ptr [[PTR0]], align 8
; VECTOR-NEXT:    [[VECL7:%.*]] = load <4 x float>, ptr [[PTR0]], align 8
; VECTOR-NEXT:    [[C0:%.*]] = load <2 x i1>, ptr [[CPTR0]], align 1
; VECTOR-NEXT:    [[C1:%.*]] = load <2 x i1>, ptr [[CPTR1]], align 1
; VECTOR-NEXT:    [[XPACK:%.*]] = extractelement <2 x i1> [[C0]], i64 0
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <4 x i1> poison, i1 [[XPACK]], i64 0
; VECTOR-NEXT:    [[XPACK1:%.*]] = extractelement <2 x i1> [[C0]], i64 1
; VECTOR-NEXT:    [[PACK2:%.*]] = insertelement <4 x i1> [[PACK]], i1 [[XPACK1]], i64 1
; VECTOR-NEXT:    [[XPACK3:%.*]] = extractelement <2 x i1> [[C1]], i64 0
; VECTOR-NEXT:    [[PACK4:%.*]] = insertelement <4 x i1> [[PACK2]], i1 [[XPACK3]], i64 2
; VECTOR-NEXT:    [[XPACK5:%.*]] = extractelement <2 x i1> [[C1]], i64 1
; VECTOR-NEXT:    [[PACK6:%.*]] = insertelement <4 x i1> [[PACK4]], i1 [[XPACK5]], i64 3
; VECTOR-NEXT:    [[VEC:%.*]] = select <4 x i1> [[PACK6]], <4 x float> [[VECL]], <4 x float> [[VECL7]]
; VECTOR-NEXT:    store <4 x float> [[VEC]], ptr [[PTR0]], align 8
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @widen_vector_selects_vector_cond
; SCALAR-SAME: (ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr <2 x float>, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr <2 x float>, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[CPTR0:%.*]] = getelementptr <2 x i1>, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[CPTR1:%.*]] = getelementptr <2 x i1>, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[LHS0:%.*]] = load <2 x float>, ptr [[PTR0]], align 8
; SCALAR-NEXT:    [[LHS1:%.*]] = load <2 x float>, ptr [[PTR1]], align 8
; SCALAR-NEXT:    [[RHS0:%.*]] = load <2 x float>, ptr [[PTR0]], align 8
; SCALAR-NEXT:    [[RHS1:%.*]] = load <2 x float>, ptr [[PTR1]], align 8
; SCALAR-NEXT:    [[C0:%.*]] = load <2 x i1>, ptr [[CPTR0]], align 1
; SCALAR-NEXT:    [[C1:%.*]] = load <2 x i1>, ptr [[CPTR1]], align 1
; SCALAR-NEXT:    [[SEL0:%.*]] = select <2 x i1> [[C0]], <2 x float> [[LHS0]], <2 x float> [[RHS0]]
; SCALAR-NEXT:    [[SEL1:%.*]] = select <2 x i1> [[C1]], <2 x float> [[LHS1]], <2 x float> [[RHS1]]
; SCALAR-NEXT:    store <2 x float> [[SEL0]], ptr [[PTR0]], align 8
; SCALAR-NEXT:    store <2 x float> [[SEL1]], ptr [[PTR1]], align 8
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr <2 x float>, ptr %ptr, i32 0
  %ptr1 = getelementptr <2 x float>, ptr %ptr, i32 1
  %cptr0 = getelementptr <2 x i1>, ptr %ptr, i32 0
  %cptr1 = getelementptr <2 x i1>, ptr %ptr, i32 1

  %lhs0 = load <2 x float>, ptr %ptr0
  %lhs1 = load <2 x float>, ptr %ptr1

  %rhs0 = load <2 x float>, ptr %ptr0
  %rhs1 = load <2 x float>, ptr %ptr1

  %c0 = load <2 x i1>, ptr %cptr0
  %c1 = load <2 x i1>, ptr %cptr1

  %sel0 = select <2 x i1> %c0, <2 x float> %lhs0, <2 x float> %rhs0
  %sel1 = select <2 x i1> %c1, <2 x float> %lhs1, <2 x float> %rhs1

  store <2 x float> %sel0, ptr %ptr0
  store <2 x float> %sel1, ptr %ptr1
  ret void
}

define void @widen_scalar_selects(ptr %ptr) {
; VECTOR-LABEL: define void @widen_scalar_selects
; VECTOR-SAME: (ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr double, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[CPTR0:%.*]] = getelementptr i1, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[CPTR1:%.*]] = getelementptr i1, ptr [[PTR]], i32 1
; VECTOR-NEXT:    [[VECL:%.*]] = load <2 x double>, ptr [[PTR0]], align 8
; VECTOR-NEXT:    [[VECL2:%.*]] = load <2 x double>, ptr [[PTR0]], align 8
; VECTOR-NEXT:    [[C0:%.*]] = load i1, ptr [[CPTR0]], align 1
; VECTOR-NEXT:    [[C1:%.*]] = load i1, ptr [[CPTR1]], align 1
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <2 x i1> poison, i1 [[C0]], i64 0
; VECTOR-NEXT:    [[PACK1:%.*]] = insertelement <2 x i1> [[PACK]], i1 [[C1]], i64 1
; VECTOR-NEXT:    [[VEC:%.*]] = select <2 x i1> [[PACK1]], <2 x double> [[VECL]], <2 x double> [[VECL2]]
; VECTOR-NEXT:    store <2 x double> [[VEC]], ptr [[PTR0]], align 8
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @widen_scalar_selects
; SCALAR-SAME: (ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr double, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr double, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[CPTR0:%.*]] = getelementptr i1, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[CPTR1:%.*]] = getelementptr i1, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[LHS0:%.*]] = load double, ptr [[PTR0]], align 8
; SCALAR-NEXT:    [[LHS1:%.*]] = load double, ptr [[PTR1]], align 8
; SCALAR-NEXT:    [[RHS0:%.*]] = load double, ptr [[PTR0]], align 8
; SCALAR-NEXT:    [[RHS1:%.*]] = load double, ptr [[PTR1]], align 8
; SCALAR-NEXT:    [[C0:%.*]] = load i1, ptr [[CPTR0]], align 1
; SCALAR-NEXT:    [[C1:%.*]] = load i1, ptr [[CPTR1]], align 1
; SCALAR-NEXT:    [[SEL0:%.*]] = select i1 [[C0]], double [[LHS0]], double [[RHS0]]
; SCALAR-NEXT:    [[SEL1:%.*]] = select i1 [[C1]], double [[LHS1]], double [[RHS1]]
; SCALAR-NEXT:    store double [[SEL0]], ptr [[PTR0]], align 8
; SCALAR-NEXT:    store double [[SEL1]], ptr [[PTR1]], align 8
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr double, ptr %ptr, i32 0
  %ptr1 = getelementptr double, ptr %ptr, i32 1
  %cptr0 = getelementptr i1, ptr %ptr, i32 0
  %cptr1 = getelementptr i1, ptr %ptr, i32 1

  %lhs0 = load double, ptr %ptr0
  %lhs1 = load double, ptr %ptr1

  %rhs0 = load double, ptr %ptr0
  %rhs1 = load double, ptr %ptr1

  %c0 = load i1, ptr %cptr0
  %c1 = load i1, ptr %cptr1

  %sel0 = select i1 %c0, double %lhs0, double %rhs0
  %sel1 = select i1 %c1, double %lhs1, double %rhs1

  store double %sel0, ptr %ptr0
  store double %sel1, ptr %ptr1
  ret void
}
