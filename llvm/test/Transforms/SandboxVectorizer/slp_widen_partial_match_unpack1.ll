; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=sandbox-vectorizer -sbvec-passes=boup-vectorize,accept-or-revert -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-passes=boup-vectorize,accept-or-revert -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 %s -S | FileCheck %s --check-prefix=SCALAR
;
; l0  l1  l1  l2
;  \ /     \ /
;   -       -
;   |       |
;   S       S
define void @partial_match(ptr noalias %ptr) {
;
; VECTOR-LABEL: define void @partial_match(
; VECTOR-SAME: ptr noalias [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[PTR2:%.*]] = getelementptr float, ptr [[PTR]], i32 2
; VECTOR-NEXT:    [[VECL:%.*]] = load <2 x float>, ptr [[PTR0]], align 4
; VECTOR-NEXT:    [[UNPACK:%.*]] = extractelement <2 x float> [[VECL]], i64 1
; VECTOR-NEXT:    [[LD2:%.*]] = load float, ptr [[PTR2]], align 4
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <2 x float> poison, float [[UNPACK]], i64 0
; VECTOR-NEXT:    [[PACK1:%.*]] = insertelement <2 x float> [[PACK]], float [[LD2]], i64 1
; VECTOR-NEXT:    [[VEC:%.*]] = fsub <2 x float> [[VECL]], [[PACK1]]
; VECTOR-NEXT:    store <2 x float> [[VEC]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @partial_match(
; SCALAR-SAME: ptr noalias [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[PTR2:%.*]] = getelementptr float, ptr [[PTR]], i32 2
; SCALAR-NEXT:    [[LD0:%.*]] = load float, ptr [[PTR0]], align 4
; SCALAR-NEXT:    [[LD1:%.*]] = load float, ptr [[PTR1]], align 4
; SCALAR-NEXT:    [[LD2:%.*]] = load float, ptr [[PTR2]], align 4
; SCALAR-NEXT:    [[SUB0:%.*]] = fsub float [[LD0]], [[LD1]]
; SCALAR-NEXT:    [[SUB1:%.*]] = fsub float [[LD1]], [[LD2]]
; SCALAR-NEXT:    store float [[SUB0]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[SUB1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1
  %ptr2 = getelementptr float, ptr %ptr, i32 2

  %ld0 = load float, ptr %ptr0
  %ld1 = load float, ptr %ptr1
  %ld2 = load float, ptr %ptr2

  %sub0 = fsub float %ld0, %ld1
  %sub1 = fsub float %ld1, %ld2

  store float %sub0, ptr %ptr0
  store float %sub1, ptr %ptr1
  ret void
}

define void @partial_match_2wide(<2 x float> %arg, ptr %ptr) {
; VECTOR-LABEL: define void @partial_match_2wide(
; VECTOR-SAME: <2 x float> [[ARG:%.*]], ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[XPACK7:%.*]] = extractelement <2 x float> [[ARG]], i64 0
; VECTOR-NEXT:    [[PACK8:%.*]] = insertelement <4 x float> poison, float [[XPACK7]], i64 0
; VECTOR-NEXT:    [[XPACK9:%.*]] = extractelement <2 x float> [[ARG]], i64 1
; VECTOR-NEXT:    [[PACK10:%.*]] = insertelement <4 x float> [[PACK8]], float [[XPACK9]], i64 1
; VECTOR-NEXT:    [[XPACK11:%.*]] = extractelement <2 x float> [[ARG]], i64 0
; VECTOR-NEXT:    [[PACK12:%.*]] = insertelement <4 x float> [[PACK10]], float [[XPACK11]], i64 2
; VECTOR-NEXT:    [[XPACK13:%.*]] = extractelement <2 x float> [[ARG]], i64 1
; VECTOR-NEXT:    [[PACK14:%.*]] = insertelement <4 x float> [[PACK12]], float [[XPACK13]], i64 3
; VECTOR-NEXT:    [[XPACK:%.*]] = extractelement <2 x float> [[ARG]], i64 0
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <4 x float> poison, float [[XPACK]], i64 0
; VECTOR-NEXT:    [[XPACK1:%.*]] = extractelement <2 x float> [[ARG]], i64 1
; VECTOR-NEXT:    [[PACK2:%.*]] = insertelement <4 x float> [[PACK]], float [[XPACK1]], i64 1
; VECTOR-NEXT:    [[XPACK3:%.*]] = extractelement <2 x float> [[ARG]], i64 0
; VECTOR-NEXT:    [[PACK4:%.*]] = insertelement <4 x float> [[PACK2]], float [[XPACK3]], i64 2
; VECTOR-NEXT:    [[XPACK5:%.*]] = extractelement <2 x float> [[ARG]], i64 1
; VECTOR-NEXT:    [[PACK6:%.*]] = insertelement <4 x float> [[PACK4]], float [[XPACK5]], i64 3
; VECTOR-NEXT:    [[VEC:%.*]] = fsub <4 x float> [[PACK6]], [[PACK14]]
; VECTOR-NEXT:    [[UNPACK:%.*]] = shufflevector <4 x float> [[VEC]], <4 x float> poison, <2 x i32> <i32 0, i32 1>
; VECTOR-NEXT:    [[FSUBC:%.*]] = fsub <2 x float> [[ARG]], [[ARG]]
; VECTOR-NEXT:    [[XPACK15:%.*]] = extractelement <2 x float> [[UNPACK]], i64 0
; VECTOR-NEXT:    [[PACK16:%.*]] = insertelement <4 x float> poison, float [[XPACK15]], i64 0
; VECTOR-NEXT:    [[XPACK17:%.*]] = extractelement <2 x float> [[UNPACK]], i64 1
; VECTOR-NEXT:    [[PACK18:%.*]] = insertelement <4 x float> [[PACK16]], float [[XPACK17]], i64 1
; VECTOR-NEXT:    [[XPACK19:%.*]] = extractelement <2 x float> [[FSUBC]], i64 0
; VECTOR-NEXT:    [[PACK20:%.*]] = insertelement <4 x float> [[PACK18]], float [[XPACK19]], i64 2
; VECTOR-NEXT:    [[XPACK21:%.*]] = extractelement <2 x float> [[FSUBC]], i64 1
; VECTOR-NEXT:    [[PACK22:%.*]] = insertelement <4 x float> [[PACK20]], float [[XPACK21]], i64 3
; VECTOR-NEXT:    [[VEC23:%.*]] = fadd <4 x float> [[VEC]], [[PACK22]]
; VECTOR-NEXT:    [[GEP0:%.*]] = getelementptr <2 x float>, ptr [[PTR]], i32 0
; VECTOR-NEXT:    store <4 x float> [[VEC23]], ptr [[GEP0]], align 8
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @partial_match_2wide(
; SCALAR-SAME: <2 x float> [[ARG:%.*]], ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[FSUBA:%.*]] = fsub <2 x float> [[ARG]], [[ARG]]
; SCALAR-NEXT:    [[FSUBB:%.*]] = fsub <2 x float> [[ARG]], [[ARG]]
; SCALAR-NEXT:    [[FSUBC:%.*]] = fsub <2 x float> [[ARG]], [[ARG]]
; SCALAR-NEXT:    [[FADD0:%.*]] = fadd <2 x float> [[FSUBA]], [[FSUBA]]
; SCALAR-NEXT:    [[FADD1:%.*]] = fadd <2 x float> [[FSUBB]], [[FSUBC]]
; SCALAR-NEXT:    [[GEP0:%.*]] = getelementptr <2 x float>, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[GEP1:%.*]] = getelementptr <2 x float>, ptr [[PTR]], i32 1
; SCALAR-NEXT:    store <2 x float> [[FADD0]], ptr [[GEP0]], align 8
; SCALAR-NEXT:    store <2 x float> [[FADD1]], ptr [[GEP1]], align 8
; SCALAR-NEXT:    ret void
;
  %fsubA = fsub <2 x float> %arg, %arg
  %fsubB = fsub <2 x float> %arg, %arg
  %fsubC = fsub <2 x float> %arg, %arg

  %fadd0 = fadd <2 x float> %fsubA, %fsubA
  %fadd1 = fadd <2 x float> %fsubB, %fsubC

  %gep0 = getelementptr <2 x float>, ptr %ptr, i32 0
  %gep1 = getelementptr <2 x float>, ptr %ptr, i32 1
  store <2 x float> %fadd0, ptr %gep0
  store <2 x float> %fadd1, ptr %gep1
  ret void
}

define void @partial_match_4wide(<4 x float> %arg, ptr %ptr) {
; VECTOR-LABEL: define void @partial_match_4wide(
; VECTOR-SAME: <4 x float> [[ARG:%.*]], ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[XPACK15:%.*]] = extractelement <4 x float> [[ARG]], i64 0
; VECTOR-NEXT:    [[PACK16:%.*]] = insertelement <8 x float> poison, float [[XPACK15]], i64 0
; VECTOR-NEXT:    [[XPACK17:%.*]] = extractelement <4 x float> [[ARG]], i64 1
; VECTOR-NEXT:    [[PACK18:%.*]] = insertelement <8 x float> [[PACK16]], float [[XPACK17]], i64 1
; VECTOR-NEXT:    [[XPACK19:%.*]] = extractelement <4 x float> [[ARG]], i64 2
; VECTOR-NEXT:    [[PACK20:%.*]] = insertelement <8 x float> [[PACK18]], float [[XPACK19]], i64 2
; VECTOR-NEXT:    [[XPACK21:%.*]] = extractelement <4 x float> [[ARG]], i64 3
; VECTOR-NEXT:    [[PACK22:%.*]] = insertelement <8 x float> [[PACK20]], float [[XPACK21]], i64 3
; VECTOR-NEXT:    [[XPACK23:%.*]] = extractelement <4 x float> [[ARG]], i64 0
; VECTOR-NEXT:    [[PACK24:%.*]] = insertelement <8 x float> [[PACK22]], float [[XPACK23]], i64 4
; VECTOR-NEXT:    [[XPACK25:%.*]] = extractelement <4 x float> [[ARG]], i64 1
; VECTOR-NEXT:    [[PACK26:%.*]] = insertelement <8 x float> [[PACK24]], float [[XPACK25]], i64 5
; VECTOR-NEXT:    [[XPACK27:%.*]] = extractelement <4 x float> [[ARG]], i64 2
; VECTOR-NEXT:    [[PACK28:%.*]] = insertelement <8 x float> [[PACK26]], float [[XPACK27]], i64 6
; VECTOR-NEXT:    [[XPACK29:%.*]] = extractelement <4 x float> [[ARG]], i64 3
; VECTOR-NEXT:    [[PACK30:%.*]] = insertelement <8 x float> [[PACK28]], float [[XPACK29]], i64 7
; VECTOR-NEXT:    [[XPACK:%.*]] = extractelement <4 x float> [[ARG]], i64 0
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <8 x float> poison, float [[XPACK]], i64 0
; VECTOR-NEXT:    [[XPACK1:%.*]] = extractelement <4 x float> [[ARG]], i64 1
; VECTOR-NEXT:    [[PACK2:%.*]] = insertelement <8 x float> [[PACK]], float [[XPACK1]], i64 1
; VECTOR-NEXT:    [[XPACK3:%.*]] = extractelement <4 x float> [[ARG]], i64 2
; VECTOR-NEXT:    [[PACK4:%.*]] = insertelement <8 x float> [[PACK2]], float [[XPACK3]], i64 2
; VECTOR-NEXT:    [[XPACK5:%.*]] = extractelement <4 x float> [[ARG]], i64 3
; VECTOR-NEXT:    [[PACK6:%.*]] = insertelement <8 x float> [[PACK4]], float [[XPACK5]], i64 3
; VECTOR-NEXT:    [[XPACK7:%.*]] = extractelement <4 x float> [[ARG]], i64 0
; VECTOR-NEXT:    [[PACK8:%.*]] = insertelement <8 x float> [[PACK6]], float [[XPACK7]], i64 4
; VECTOR-NEXT:    [[XPACK9:%.*]] = extractelement <4 x float> [[ARG]], i64 1
; VECTOR-NEXT:    [[PACK10:%.*]] = insertelement <8 x float> [[PACK8]], float [[XPACK9]], i64 5
; VECTOR-NEXT:    [[XPACK11:%.*]] = extractelement <4 x float> [[ARG]], i64 2
; VECTOR-NEXT:    [[PACK12:%.*]] = insertelement <8 x float> [[PACK10]], float [[XPACK11]], i64 6
; VECTOR-NEXT:    [[XPACK13:%.*]] = extractelement <4 x float> [[ARG]], i64 3
; VECTOR-NEXT:    [[PACK14:%.*]] = insertelement <8 x float> [[PACK12]], float [[XPACK13]], i64 7
; VECTOR-NEXT:    [[VEC:%.*]] = fsub <8 x float> [[PACK14]], [[PACK30]]
; VECTOR-NEXT:    [[UNPACK:%.*]] = shufflevector <8 x float> [[VEC]], <8 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; VECTOR-NEXT:    [[FSUBC:%.*]] = fsub <4 x float> [[ARG]], [[ARG]]
; VECTOR-NEXT:    [[XPACK31:%.*]] = extractelement <4 x float> [[UNPACK]], i64 0
; VECTOR-NEXT:    [[PACK32:%.*]] = insertelement <8 x float> poison, float [[XPACK31]], i64 0
; VECTOR-NEXT:    [[XPACK33:%.*]] = extractelement <4 x float> [[UNPACK]], i64 1
; VECTOR-NEXT:    [[PACK34:%.*]] = insertelement <8 x float> [[PACK32]], float [[XPACK33]], i64 1
; VECTOR-NEXT:    [[XPACK35:%.*]] = extractelement <4 x float> [[UNPACK]], i64 2
; VECTOR-NEXT:    [[PACK36:%.*]] = insertelement <8 x float> [[PACK34]], float [[XPACK35]], i64 2
; VECTOR-NEXT:    [[XPACK37:%.*]] = extractelement <4 x float> [[UNPACK]], i64 3
; VECTOR-NEXT:    [[PACK38:%.*]] = insertelement <8 x float> [[PACK36]], float [[XPACK37]], i64 3
; VECTOR-NEXT:    [[XPACK39:%.*]] = extractelement <4 x float> [[FSUBC]], i64 0
; VECTOR-NEXT:    [[PACK40:%.*]] = insertelement <8 x float> [[PACK38]], float [[XPACK39]], i64 4
; VECTOR-NEXT:    [[XPACK41:%.*]] = extractelement <4 x float> [[FSUBC]], i64 1
; VECTOR-NEXT:    [[PACK42:%.*]] = insertelement <8 x float> [[PACK40]], float [[XPACK41]], i64 5
; VECTOR-NEXT:    [[XPACK43:%.*]] = extractelement <4 x float> [[FSUBC]], i64 2
; VECTOR-NEXT:    [[PACK44:%.*]] = insertelement <8 x float> [[PACK42]], float [[XPACK43]], i64 6
; VECTOR-NEXT:    [[XPACK45:%.*]] = extractelement <4 x float> [[FSUBC]], i64 3
; VECTOR-NEXT:    [[PACK46:%.*]] = insertelement <8 x float> [[PACK44]], float [[XPACK45]], i64 7
; VECTOR-NEXT:    [[VEC47:%.*]] = fadd <8 x float> [[VEC]], [[PACK46]]
; VECTOR-NEXT:    [[GEP0:%.*]] = getelementptr <4 x float>, ptr [[PTR]], i32 0
; VECTOR-NEXT:    store <8 x float> [[VEC47]], ptr [[GEP0]], align 16
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @partial_match_4wide(
; SCALAR-SAME: <4 x float> [[ARG:%.*]], ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[FSUBA:%.*]] = fsub <4 x float> [[ARG]], [[ARG]]
; SCALAR-NEXT:    [[FSUBB:%.*]] = fsub <4 x float> [[ARG]], [[ARG]]
; SCALAR-NEXT:    [[FSUBC:%.*]] = fsub <4 x float> [[ARG]], [[ARG]]
; SCALAR-NEXT:    [[FADD0:%.*]] = fadd <4 x float> [[FSUBA]], [[FSUBA]]
; SCALAR-NEXT:    [[FADD1:%.*]] = fadd <4 x float> [[FSUBB]], [[FSUBC]]
; SCALAR-NEXT:    [[GEP0:%.*]] = getelementptr <4 x float>, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[GEP1:%.*]] = getelementptr <4 x float>, ptr [[PTR]], i32 1
; SCALAR-NEXT:    store <4 x float> [[FADD0]], ptr [[GEP0]], align 16
; SCALAR-NEXT:    store <4 x float> [[FADD1]], ptr [[GEP1]], align 16
; SCALAR-NEXT:    ret void
;
  %fsubA = fsub <4 x float> %arg, %arg
  %fsubB = fsub <4 x float> %arg, %arg
  %fsubC = fsub <4 x float> %arg, %arg

  %fadd0 = fadd <4 x float> %fsubA, %fsubA
  %fadd1 = fadd <4 x float> %fsubB, %fsubC

  %gep0 = getelementptr <4 x float>, ptr %ptr, i32 0
  %gep1 = getelementptr <4 x float>, ptr %ptr, i32 1
  store <4 x float> %fadd0, ptr %gep0
  store <4 x float> %fadd1, ptr %gep1
  ret void
}
