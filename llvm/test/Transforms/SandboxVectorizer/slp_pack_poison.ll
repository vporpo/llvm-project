; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 %s -S | FileCheck %s --check-prefix=SCALAR

; This used to crash.
define void @pack_poison(ptr %ptr, i32 %v) {
; VECTOR-LABEL: define void @pack_poison
; VECTOR-SAME: (ptr [[PTR:%.*]], i32 [[V:%.*]]) {
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <2 x i32> poison, i32 [[V]], i64 1
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr i32, ptr [[PTR]], i32 0
; VECTOR-NEXT:    store <2 x i32> [[PACK]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @pack_poison
; SCALAR-SAME: (ptr [[PTR:%.*]], i32 [[V:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr i32, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr i32, ptr [[PTR]], i32 1
; SCALAR-NEXT:    store i32 poison, ptr [[PTR0]], align 4
; SCALAR-NEXT:    store i32 [[V]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr i32, ptr %ptr, i32 0
  %ptr1 = getelementptr i32, ptr %ptr, i32 1
  store i32 poison, ptr %ptr0
  store i32 %v, ptr %ptr1
  ret void
}
