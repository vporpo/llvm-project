; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 -sbvec-force-seeds=loads %s -S | FileCheck %s --check-prefix=VECTOR

define void @topdown_simple(ptr %ptr) {
; VECTOR-LABEL: define void @topdown_simple(
; VECTOR-SAME: ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[PTR2:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; VECTOR-NEXT:    [[VECL:%.*]] = load <2 x float>, ptr [[PTR0]], align 4, !sb [[META0:![0-9]+]]
; VECTOR-NEXT:    store <2 x float> [[VECL]], ptr [[PTR0]], align 4, !sb [[META0]]
; VECTOR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1
  %ld0 = load float, ptr %ptr0
  %ld1 = load float, ptr %ptr1
  store float %ld0, ptr %ptr0
  store float %ld1, ptr %ptr1
  ret void
}

define void @topdown_simple_2uses(ptr %ptr, float %v0, float %v1) {
; VECTOR-LABEL: define void @topdown_simple_2uses(
; VECTOR-SAME: ptr [[PTR:%.*]], float [[V0:%.*]], float [[V1:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; VECTOR-NEXT:    [[VECL:%.*]] = load <2 x float>, ptr [[PTR0]], align 4, !sb [[META1:![0-9]+]]
; VECTOR-NEXT:    [[VEC:%.*]] = fadd <2 x float> [[VECL]], [[VECL]], !sb [[META1]]
; VECTOR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1
  %ld0 = load float, ptr %ptr0
  %ld1 = load float, ptr %ptr1
  %add0 = fadd float %ld0, %ld0
  %add1 = fadd float %ld1, %ld1
  ret void
}

define void @topdown_simple_2uses_same_user_shuffled(ptr %ptr) {
; VECTOR-LABEL: define void @topdown_simple_2uses_same_user_shuffled(
; VECTOR-SAME: ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; VECTOR-NEXT:    [[VECL:%.*]] = load <2 x float>, ptr [[PTR0]], align 4, !sb [[META2:![0-9]+]]
; VECTOR-NEXT:    [[SHUF:%.*]] = shufflevector <2 x float> [[VECL]], <2 x float> poison, <2 x i32> <i32 1, i32 0>, !sb [[META2]]
; VECTOR-NEXT:    [[VEC:%.*]] = fadd <2 x float> [[VECL]], [[SHUF]], !sb [[META2]]
; VECTOR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1
  %ld0 = load float, ptr %ptr0
  %ld1 = load float, ptr %ptr1
  %add0 = fadd float %ld0, %ld1
  %add1 = fadd float %ld1, %ld0
  ret void
}

define void @topdown_simple_2uses_diff_user_reordered(ptr %ptr) {
; VECTOR-LABEL: define void @topdown_simple_2uses_diff_user_reordered(
; VECTOR-SAME: ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr i32, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[PTR1:%.*]] = getelementptr i32, ptr [[PTR]], i32 1
; VECTOR-NEXT:    [[VECL:%.*]] = load <2 x i32>, ptr [[PTR0]], align 4, !sb [[META3:![0-9]+]]
; VECTOR-NEXT:    [[VEC:%.*]] = shl <2 x i32> [[VECL]], <i32 0, i32 1>, !sb [[META3]]
; VECTOR-NEXT:    [[VEC1:%.*]] = lshr <2 x i32> [[VECL]], <i32 11, i32 10>, !sb [[META3]]
; VECTOR-NEXT:    store <2 x i32> [[VEC1]], ptr [[PTR0]], align 4, !sb [[META3]]
; VECTOR-NEXT:    ret void
;
  %ptr0 = getelementptr i32, ptr %ptr, i32 0
  %ptr1 = getelementptr i32, ptr %ptr, i32 1
  %ld0 = load i32, ptr %ptr0
  %ld1 = load i32, ptr %ptr1
  %sh0 = shl i32 %ld0, 0
  %sh1 = shl i32 %ld1, 1
  %shr0 = lshr i32 %ld1, 10
  %shr1 = lshr i32 %ld0, 11
  store i32 %shr1, ptr %ptr0
  store i32 %shr0, ptr %ptr1
  ret void
}

define void @topdown_simple_2uses_diff_user_shuffled(ptr %ptr) {
; VECTOR-LABEL: define void @topdown_simple_2uses_diff_user_shuffled(
; VECTOR-SAME: ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr i32, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[PTR1:%.*]] = getelementptr i32, ptr [[PTR]], i32 1
; VECTOR-NEXT:    [[VECL:%.*]] = load <2 x i32>, ptr [[PTR0]], align 4, !sb [[META4:![0-9]+]]
; VECTOR-NEXT:    [[VEC:%.*]] = shl <2 x i32> [[VECL]], <i32 0, i32 1>, !sb [[META4]]
; VECTOR-NEXT:    [[VEC1:%.*]] = lshr <2 x i32> [[VECL]], <i32 11, i32 10>, !sb [[META4]]
; VECTOR-NEXT:    [[UNPACK2:%.*]] = extractelement <2 x i32> [[VEC1]], i64 1, !sb [[META4]]
; VECTOR-NEXT:    [[UNPACK:%.*]] = extractelement <2 x i32> [[VEC1]], i64 0, !sb [[META4]]
; VECTOR-NEXT:    store i32 [[UNPACK2]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    store i32 [[UNPACK]], ptr [[PTR1]], align 4
; VECTOR-NEXT:    ret void
;
  %ptr0 = getelementptr i32, ptr %ptr, i32 0
  %ptr1 = getelementptr i32, ptr %ptr, i32 1
  %ld0 = load i32, ptr %ptr0
  %ld1 = load i32, ptr %ptr1
  %sh0 = shl i32 %ld0, 0
  %sh1 = shl i32 %ld1, 1
  %shr0 = lshr i32 %ld1, 10
  %shr1 = lshr i32 %ld0, 11
  store i32 %shr0, ptr %ptr0
  store i32 %shr1, ptr %ptr1
  ret void
}


define float @topdown_simple_with_external_use(ptr %ptr) {
; VECTOR-LABEL: define float @topdown_simple_with_external_use(
; VECTOR-SAME: ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; VECTOR-NEXT:    [[VECL:%.*]] = load <2 x float>, ptr [[PTR0]], align 4, !sb [[META5:![0-9]+]]
; VECTOR-NEXT:    [[UNPACK1:%.*]] = extractelement <2 x float> [[VECL]], i64 1, !sb [[META5]]
; VECTOR-NEXT:    [[UNPACK:%.*]] = extractelement <2 x float> [[VECL]], i64 0, !sb [[META5]]
; VECTOR-NEXT:    store float [[UNPACK]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    store float [[UNPACK1]], ptr [[PTR1]], align 4
; VECTOR-NEXT:    ret float [[UNPACK]]
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1
  %ld0 = load float, ptr %ptr0
  %ld1 = load float, ptr %ptr1
  store float %ld0, ptr %ptr0
  store float %ld1, ptr %ptr1
  ret float %ld0
}

define void @topdown_simple_vec_user_with_scalar_operands(ptr %ptr, float %v0, float %v1) {
; VECTOR-LABEL: define void @topdown_simple_vec_user_with_scalar_operands(
; VECTOR-SAME: ptr [[PTR:%.*]], float [[V0:%.*]], float [[V1:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; VECTOR-NEXT:    [[VECL:%.*]] = load <2 x float>, ptr [[PTR0]], align 4, !sb [[META6:![0-9]+]]
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <2 x float> poison, float [[V0]], i64 0
; VECTOR-NEXT:    [[PACK1:%.*]] = insertelement <2 x float> [[PACK]], float [[V1]], i64 1, !sb [[META6]]
; VECTOR-NEXT:    [[VEC:%.*]] = fadd <2 x float> [[VECL]], [[PACK1]], !sb [[META6]]
; VECTOR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1
  %ld0 = load float, ptr %ptr0
  %ld1 = load float, ptr %ptr1
  %add0 = fadd float %ld0, %v0
  %add1 = fadd float %ld1, %v1
  ret void
}

define void @topdown_crossBB(ptr %ptr) {
; VECTOR-LABEL: define void @topdown_crossBB(
; VECTOR-SAME: ptr [[PTR:%.*]]) {
; VECTOR-NEXT:  bb0:
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr i32, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[PTR1:%.*]] = getelementptr i32, ptr [[PTR]], i32 1
; VECTOR-NEXT:    [[VECL:%.*]] = load <2 x i32>, ptr [[PTR0]], align 4, !sb [[META7:![0-9]+]]
; VECTOR-NEXT:    [[UNPACK1:%.*]] = extractelement <2 x i32> [[VECL]], i64 1, !sb [[META7]]
; VECTOR-NEXT:    [[UNPACK:%.*]] = extractelement <2 x i32> [[VECL]], i64 0, !sb [[META7]]
; VECTOR-NEXT:    br label [[BB1:%.*]]
; VECTOR:       bb1:
; VECTOR-NEXT:    store i32 [[UNPACK]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    store i32 [[UNPACK1]], ptr [[PTR1]], align 4
; VECTOR-NEXT:    ret void
;
bb0:
  %ptr0 = getelementptr i32, ptr %ptr, i32 0
  %ptr1 = getelementptr i32, ptr %ptr, i32 1
  %ld0 = load i32, ptr %ptr0
  %ld1 = load i32, ptr %ptr1
  br label %bb1

bb1:
  store i32 %ld0, ptr %ptr0
  store i32 %ld1, ptr %ptr1
  ret void
}

define void @topdown_cantSchedule(ptr %ptr, ptr %ptrOther, i32 %other) {
; VECTOR-LABEL: define void @topdown_cantSchedule(
; VECTOR-SAME: ptr [[PTR:%.*]], ptr [[PTROTHER:%.*]], i32 [[OTHER:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr i32, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[PTR1:%.*]] = getelementptr i32, ptr [[PTR]], i32 1
; VECTOR-NEXT:    [[VECL:%.*]] = load <2 x i32>, ptr [[PTR0]], align 4, !sb [[META8:![0-9]+]]
; VECTOR-NEXT:    [[UNPACK1:%.*]] = extractelement <2 x i32> [[VECL]], i64 1, !sb [[META8]]
; VECTOR-NEXT:    [[UNPACK:%.*]] = extractelement <2 x i32> [[VECL]], i64 0, !sb [[META8]]
; VECTOR-NEXT:    store i32 [[UNPACK]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    store i32 [[OTHER]], ptr [[PTROTHER]], align 4
; VECTOR-NEXT:    store i32 [[UNPACK1]], ptr [[PTR1]], align 4
; VECTOR-NEXT:    ret void
;
  %ptr0 = getelementptr i32, ptr %ptr, i32 0
  %ptr1 = getelementptr i32, ptr %ptr, i32 1
  %ld0 = load i32, ptr %ptr0
  %ld1 = load i32, ptr %ptr1
  store i32 %ld0, ptr %ptr0
  store i32 %other, ptr %ptrOther
  store i32 %ld1, ptr %ptr1
  ret void
}

;.
; VECTOR: [[META0]] = !{!"region", i32 0}
; VECTOR: [[META1]] = !{!"region", i32 1}
; VECTOR: [[META2]] = !{!"region", i32 2}
; VECTOR: [[META3]] = !{!"region", i32 3}
; VECTOR: [[META4]] = !{!"region", i32 4}
; VECTOR: [[META5]] = !{!"region", i32 5}
; VECTOR: [[META6]] = !{!"region", i32 6}
; VECTOR: [[META7]] = !{!"region", i32 7}
; VECTOR: [[META8]] = !{!"region", i32 8}
;.
