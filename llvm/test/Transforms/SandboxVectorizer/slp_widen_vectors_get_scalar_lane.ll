; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 -sbvec-allow-non-pow2 %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 %s -S | FileCheck %s --check-prefix=SCALAR

; This checks for a bug that unpacks the wrong lane from the vectorized
; <3 x float> load. This was a bug in getScalarLane().
define void @get_scalar_lane(ptr %ptr0, <2 x float> %vec) {
; VECTOR-LABEL: define void @get_scalar_lane(
; VECTOR-SAME: ptr [[PTR0:%.*]], <2 x float> [[VEC:%.*]]) {
; VECTOR-NEXT:    [[VECL:%.*]] = load <3 x float>, ptr [[PTR0]], align 8
; VECTOR-NEXT:    [[UNPACK:%.*]] = extractelement <3 x float> [[VECL]], i64 2
; VECTOR-NEXT:    [[XPACK:%.*]] = extractelement <2 x float> [[VEC]], i64 0
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <3 x float> poison, float [[XPACK]], i64 0
; VECTOR-NEXT:    [[XPACK1:%.*]] = extractelement <2 x float> [[VEC]], i64 1
; VECTOR-NEXT:    [[PACK2:%.*]] = insertelement <3 x float> [[PACK]], float [[XPACK1]], i64 1
; VECTOR-NEXT:    [[PACK3:%.*]] = insertelement <3 x float> [[PACK2]], float [[UNPACK]], i64 2
; VECTOR-NEXT:    [[VEC:%.*]] = fsub <3 x float> [[VECL]], [[PACK3]]
; VECTOR-NEXT:    store <3 x float> [[VEC]], ptr [[PTR0]], align 8
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @get_scalar_lane(
; SCALAR-SAME: ptr [[PTR0:%.*]], <2 x float> [[VEC:%.*]]) {
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR0]], i32 2
; SCALAR-NEXT:    [[LD0:%.*]] = load <2 x float>, ptr [[PTR0]], align 8
; SCALAR-NEXT:    [[LD1:%.*]] = load float, ptr [[PTR1]], align 4
; SCALAR-NEXT:    [[FSUB0:%.*]] = fsub <2 x float> [[LD0]], [[VEC]]
; SCALAR-NEXT:    [[FSUB1:%.*]] = fsub float [[LD1]], [[LD1]]
; SCALAR-NEXT:    store <2 x float> [[FSUB0]], ptr [[PTR0]], align 8
; SCALAR-NEXT:    store float [[FSUB1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    ret void
;
  %ptr1 = getelementptr float, ptr %ptr0, i32 2
  %ld0 = load <2 x float>, ptr %ptr0
  %ld1 = load float, ptr %ptr1

  %fsub0 = fsub <2 x float> %ld0, %vec
  %fsub1 = fsub float %ld1, %ld1
  store <2 x float> %fsub0, ptr %ptr0
  store float %fsub1, ptr %ptr1
  ret void
}
