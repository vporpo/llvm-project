; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 %s -S | FileCheck %s --check-prefix=SCALAR

target datalayout = "e-i8:8"

define void @align_1_1(ptr %ptr) {
; VECTOR-LABEL: define void @align_1_1
; VECTOR-SAME: (ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr i8, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[VECL:%.*]] = load <2 x i8>, ptr [[PTR0]], align 1
; VECTOR-NEXT:    store <2 x i8> [[VECL]], ptr [[PTR0]], align 1
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @align_1_1
; SCALAR-SAME: (ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr i8, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr i8, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[LD0:%.*]] = load i8, ptr [[PTR0]], align 1
; SCALAR-NEXT:    [[LD1:%.*]] = load i8, ptr [[PTR1]], align 1
; SCALAR-NEXT:    store i8 [[LD0]], ptr [[PTR0]], align 1
; SCALAR-NEXT:    store i8 [[LD1]], ptr [[PTR1]], align 1
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr i8, ptr %ptr, i32 0
  %ptr1 = getelementptr i8, ptr %ptr, i32 1
  %ld0 = load i8, ptr %ptr0, align 1
  %ld1 = load i8, ptr %ptr1, align 1
  store i8 %ld0, ptr %ptr0, align 1
  store i8 %ld1, ptr %ptr1, align 1
  ret void
}

define void @align_1_2(ptr %ptr) {
; VECTOR-LABEL: define void @align_1_2
; VECTOR-SAME: (ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr i8, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[VECL:%.*]] = load <2 x i8>, ptr [[PTR0]], align 1
; VECTOR-NEXT:    store <2 x i8> [[VECL]], ptr [[PTR0]], align 1
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @align_1_2
; SCALAR-SAME: (ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr i8, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr i8, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[LD0:%.*]] = load i8, ptr [[PTR0]], align 1
; SCALAR-NEXT:    [[LD1:%.*]] = load i8, ptr [[PTR1]], align 2
; SCALAR-NEXT:    store i8 [[LD0]], ptr [[PTR0]], align 1
; SCALAR-NEXT:    store i8 [[LD1]], ptr [[PTR1]], align 2
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr i8, ptr %ptr, i32 0
  %ptr1 = getelementptr i8, ptr %ptr, i32 1
  %ld0 = load i8, ptr %ptr0, align 1
  %ld1 = load i8, ptr %ptr1, align 2
  store i8 %ld0, ptr %ptr0, align 1
  store i8 %ld1, ptr %ptr1, align 2
  ret void
}

define void @align_2_2(ptr %ptr) {
; VECTOR-LABEL: define void @align_2_2
; VECTOR-SAME: (ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr i8, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[VECL:%.*]] = load <2 x i8>, ptr [[PTR0]], align 2
; VECTOR-NEXT:    store <2 x i8> [[VECL]], ptr [[PTR0]], align 2
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @align_2_2
; SCALAR-SAME: (ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr i8, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr i8, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[LD0:%.*]] = load i8, ptr [[PTR0]], align 2
; SCALAR-NEXT:    [[LD1:%.*]] = load i8, ptr [[PTR1]], align 2
; SCALAR-NEXT:    store i8 [[LD0]], ptr [[PTR0]], align 2
; SCALAR-NEXT:    store i8 [[LD1]], ptr [[PTR1]], align 2
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr i8, ptr %ptr, i32 0
  %ptr1 = getelementptr i8, ptr %ptr, i32 1
  %ld0 = load i8, ptr %ptr0, align 2
  %ld1 = load i8, ptr %ptr1, align 2
  store i8 %ld0, ptr %ptr0, align 2
  store i8 %ld1, ptr %ptr1, align 2
  ret void
}
