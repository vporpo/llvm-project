; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S -sbvec-passes=boup-vectorize | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 %s -S -sbvec-passes=boup-vectorize | FileCheck %s --check-prefix=SCALAR

define void @simple_pack(ptr noalias %ptr, ptr %ptrX, ptr %ptrY) {
;
; VECTOR-LABEL: define void @simple_pack(
; VECTOR-SAME: ptr noalias [[PTR:%.*]], ptr [[PTRX:%.*]], ptr [[PTRY:%.*]]) {
; VECTOR-NEXT:    [[LDX:%.*]] = load float, ptr [[PTRX]], align 4
; VECTOR-NEXT:    [[LDY:%.*]] = load float, ptr [[PTRY]], align 4
; VECTOR-NEXT:    [[INS0:%.*]] = insertelement <2 x float> poison, float [[LDX]], i32 0
; VECTOR-NEXT:    [[INS1:%.*]] = insertelement <2 x float> [[INS0]], float [[LDY]], i32 1
; VECTOR-NEXT:    store <2 x float> [[INS1]], ptr [[PTR]], align 8
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @simple_pack(
; SCALAR-SAME: ptr noalias [[PTR:%.*]], ptr [[PTRX:%.*]], ptr [[PTRY:%.*]]) {
; SCALAR-NEXT:    [[LDX:%.*]] = load float, ptr [[PTRX]], align 4
; SCALAR-NEXT:    [[LDY:%.*]] = load float, ptr [[PTRY]], align 4
; SCALAR-NEXT:    [[INS0:%.*]] = insertelement <2 x float> poison, float [[LDX]], i32 0
; SCALAR-NEXT:    [[INS1:%.*]] = insertelement <2 x float> [[INS0]], float [[LDY]], i32 1
; SCALAR-NEXT:    store <2 x float> [[INS1]], ptr [[PTR]], align 8
; SCALAR-NEXT:    ret void
;
  %ldX = load float, ptr %ptrX
  %ldY = load float, ptr %ptrY
  %ins0 = insertelement <2 x float> poison, float %ldX, i32 0
  %ins1 = insertelement <2 x float> %ins0, float %ldY, i32 1
  store <2 x float> %ins1, ptr %ptr
  ret void
}
