; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 %s -S | FileCheck %s --check-prefix=SCALAR

define void @pack_with_funcargs(ptr noalias %ptr, float %arg0, float %arg1) {
;
; VECTOR-LABEL: define void @pack_with_funcargs(
; VECTOR-SAME: ptr noalias [[PTR:%.*]], float [[ARG0:%.*]], float [[ARG1:%.*]]) {
; VECTOR-NEXT:  bb:
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <2 x float> poison, float [[ARG0]], i64 0
; VECTOR-NEXT:    [[PACK1:%.*]] = insertelement <2 x float> [[PACK]], float [[ARG1]], i64 1
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[VECL:%.*]] = load <2 x float>, ptr [[PTR0]], align 4
; VECTOR-NEXT:    [[VEC:%.*]] = fsub <2 x float> [[VECL]], [[PACK1]]
; VECTOR-NEXT:    store <2 x float> [[VEC]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @pack_with_funcargs(
; SCALAR-SAME: ptr noalias [[PTR:%.*]], float [[ARG0:%.*]], float [[ARG1:%.*]]) {
; SCALAR-NEXT:  bb:
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[LD0:%.*]] = load float, ptr [[PTR0]], align 4
; SCALAR-NEXT:    [[LD1:%.*]] = load float, ptr [[PTR1]], align 4
; SCALAR-NEXT:    [[SUB0:%.*]] = fsub float [[LD0]], [[ARG0]]
; SCALAR-NEXT:    [[SUB1:%.*]] = fsub float [[LD1]], [[ARG1]]
; SCALAR-NEXT:    store float [[SUB0]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[SUB1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    ret void
;
bb:
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1
  %ld0 = load float, ptr %ptr0
  %ld1 = load float, ptr %ptr1

  %sub0 = fsub float %ld0, %arg0
  %sub1 = fsub float %ld1, %arg1
  store float %sub0, ptr %ptr0
  store float %sub1, ptr %ptr1
  ret void
}

