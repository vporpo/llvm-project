; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR

; This checks for a DAG bug where the WAR dependency:
;   %dep_load = load double, ptr %ptr0 -> store double %ld20, ptr %ptr0
;
; is missing from the DAG, resulting in code like:
;   store <2 x double> %Pack3, ptr %ptr0
;   %other = load double, ptr %ptr0
;
; which violates the dependency and results in a miscompile.
define void @dag_bug(ptr %ptr, double %A, double %B, ptr %ptrAB, double %ld20, double %ld22) {
; VECTOR-LABEL: define void @dag_bug
; VECTOR-SAME: (ptr [[PTR:%.*]], double [[A:%.*]], double [[B:%.*]], ptr [[PTRAB:%.*]], double [[LD20:%.*]], double [[LD22:%.*]]) {
; VECTOR-NEXT:    [[PACK2:%.*]] = insertelement <2 x double> poison, double [[LD20]], i64 0
; VECTOR-NEXT:    [[PACK3:%.*]] = insertelement <2 x double> [[PACK2]], double [[LD22]], i64 1
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <2 x double> poison, double [[A]], i64 0
; VECTOR-NEXT:    [[PACK1:%.*]] = insertelement <2 x double> [[PACK]], double [[B]], i64 1
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr double, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[PTR20:%.*]] = getelementptr double, ptr [[PTR]], i32 20
; VECTOR-NEXT:    [[PTR22:%.*]] = getelementptr double, ptr [[PTR]], i32 22
; VECTOR-NEXT:    [[PTR10:%.*]] = getelementptr double, ptr [[PTR]], i32 10
; VECTOR-NEXT:    store <2 x double> [[PACK1]], ptr [[PTR10]], align 8
; VECTOR-NEXT:    [[DEP_LOAD:%.*]] = load double, ptr [[PTR0]], align 8
; VECTOR-NEXT:    store <2 x double> [[PACK3]], ptr [[PTR0]], align 8
; VECTOR-NEXT:    ret void
;
  %ptr0 = getelementptr double, ptr %ptr, i32 0
  %ptr1 = getelementptr double, ptr %ptr, i32 1
  %ptr20 = getelementptr double, ptr %ptr, i32 20
  %ptr22 = getelementptr double, ptr %ptr, i32 22

  %ptr10 = getelementptr double, ptr %ptr, i32 10
  %ptr11 = getelementptr double, ptr %ptr, i32 11

  store double %B, ptr %ptr11
  store double %A, ptr %ptr10

  store double %ld22, ptr %ptr1
  %dep_load = load double, ptr %ptr0
  store double %ld20, ptr %ptr0
  ret void
}
