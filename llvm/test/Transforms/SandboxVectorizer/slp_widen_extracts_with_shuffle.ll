; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 %s -S | FileCheck %s --check-prefix=SCALAR

define void @widen_extracts_with_shuffle(ptr noalias %ptr, float %val) {
;
; VECTOR-LABEL: define void @widen_extracts_with_shuffle(
; VECTOR-SAME: ptr noalias [[PTR:%.*]], float [[VAL:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[VECLD:%.*]] = load <2 x float>, ptr [[PTR]], align 8
; VECTOR-NEXT:    [[SHUF:%.*]] = shufflevector <2 x float> [[VECLD]], <2 x float> poison, <2 x i32> <i32 1, i32 0>
; VECTOR-NEXT:    store <2 x float> [[SHUF]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @widen_extracts_with_shuffle(
; SCALAR-SAME: ptr noalias [[PTR:%.*]], float [[VAL:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[VECLD:%.*]] = load <2 x float>, ptr [[PTR]], align 8
; SCALAR-NEXT:    [[EXTR0:%.*]] = extractelement <2 x float> [[VECLD]], i32 1
; SCALAR-NEXT:    [[EXTR1:%.*]] = extractelement <2 x float> [[VECLD]], i32 0
; SCALAR-NEXT:    store float [[EXTR0]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[EXTR1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1

  %vecld = load <2 x float>, ptr %ptr
  %extr0 = extractelement <2 x float> %vecld, i32 1
  %extr1 = extractelement <2 x float> %vecld, i32 0
  store float %extr0, ptr %ptr0
  store float %extr1, ptr %ptr1
  ret void
}

define void @widen_extracts_with_shuffle2(ptr noalias %ptr, float %val) {
;
; VECTOR-LABEL: define void @widen_extracts_with_shuffle2(
; VECTOR-SAME: ptr noalias [[PTR:%.*]], float [[VAL:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[VECLD:%.*]] = load <4 x float>, ptr [[PTR]], align 16
; VECTOR-NEXT:    [[SHUF:%.*]] = shufflevector <4 x float> [[VECLD]], <4 x float> poison, <4 x i32> <i32 0, i32 1, i32 3, i32 2>
; VECTOR-NEXT:    store <4 x float> [[SHUF]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @widen_extracts_with_shuffle2(
; SCALAR-SAME: ptr noalias [[PTR:%.*]], float [[VAL:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[PTR2:%.*]] = getelementptr float, ptr [[PTR]], i32 2
; SCALAR-NEXT:    [[PTR3:%.*]] = getelementptr float, ptr [[PTR]], i32 3
; SCALAR-NEXT:    [[VECLD:%.*]] = load <4 x float>, ptr [[PTR]], align 16
; SCALAR-NEXT:    [[EXTR0:%.*]] = extractelement <4 x float> [[VECLD]], i32 0
; SCALAR-NEXT:    [[EXTR1:%.*]] = extractelement <4 x float> [[VECLD]], i32 1
; SCALAR-NEXT:    [[EXTR2:%.*]] = extractelement <4 x float> [[VECLD]], i32 3
; SCALAR-NEXT:    [[EXTR3:%.*]] = extractelement <4 x float> [[VECLD]], i32 2
; SCALAR-NEXT:    store float [[EXTR0]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[EXTR1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    store float [[EXTR2]], ptr [[PTR2]], align 4
; SCALAR-NEXT:    store float [[EXTR3]], ptr [[PTR3]], align 4
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1
  %ptr2 = getelementptr float, ptr %ptr, i32 2
  %ptr3 = getelementptr float, ptr %ptr, i32 3

  %vecld = load <4 x float>, ptr %ptr
  %extr0 = extractelement <4 x float> %vecld, i32 0
  %extr1 = extractelement <4 x float> %vecld, i32 1
  %extr2 = extractelement <4 x float> %vecld, i32 3
  %extr3 = extractelement <4 x float> %vecld, i32 2
  store float %extr0, ptr %ptr0
  store float %extr1, ptr %ptr1
  store float %extr2, ptr %ptr2
  store float %extr3, ptr %ptr3
  ret void
}

define void @widen_extracts_with_shuffle_diff_vf(ptr %ptr) {
; VECTOR-LABEL: define void @widen_extracts_with_shuffle_diff_vf(
; VECTOR-SAME: ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[VECLD:%.*]] = load <4 x float>, ptr [[PTR]], align 16
; VECTOR-NEXT:    [[UNPACK:%.*]] = shufflevector <4 x float> [[VECLD]], <4 x float> poison, <2 x i32> <i32 0, i32 1>
; VECTOR-NEXT:    [[EXTR0:%.*]] = extractelement <4 x float> [[VECLD]], i32 0
; VECTOR-NEXT:    [[EXTR1:%.*]] = extractelement <4 x float> [[VECLD]], i32 1
; VECTOR-NEXT:    store <2 x float> [[UNPACK]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @widen_extracts_with_shuffle_diff_vf(
; SCALAR-SAME: ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[VECLD:%.*]] = load <4 x float>, ptr [[PTR]], align 16
; SCALAR-NEXT:    [[EXTR0:%.*]] = extractelement <4 x float> [[VECLD]], i32 0
; SCALAR-NEXT:    [[EXTR1:%.*]] = extractelement <4 x float> [[VECLD]], i32 1
; SCALAR-NEXT:    store float [[EXTR0]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[EXTR1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1

  %vecld = load <4 x float>, ptr %ptr
  %extr0 = extractelement <4 x float> %vecld, i32 0
  %extr1 = extractelement <4 x float> %vecld, i32 1
  store float %extr0, ptr %ptr0
  store float %extr1, ptr %ptr1
  ret void
}

define void @widen_extracts_with_shuffle_diff_vf_outoforder0(ptr %ptr) {
; VECTOR-LABEL: define void @widen_extracts_with_shuffle_diff_vf_outoforder0(
; VECTOR-SAME: ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[VECLD:%.*]] = load <4 x float>, ptr [[PTR]], align 16
; VECTOR-NEXT:    [[EXTR0:%.*]] = extractelement <4 x float> [[VECLD]], i32 0
; VECTOR-NEXT:    [[EXTR1:%.*]] = extractelement <4 x float> [[VECLD]], i32 1
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <2 x float> poison, float [[EXTR1]], i64 0
; VECTOR-NEXT:    [[PACK1:%.*]] = insertelement <2 x float> [[PACK]], float [[EXTR0]], i64 1
; VECTOR-NEXT:    store <2 x float> [[PACK1]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @widen_extracts_with_shuffle_diff_vf_outoforder0(
; SCALAR-SAME: ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[VECLD:%.*]] = load <4 x float>, ptr [[PTR]], align 16
; SCALAR-NEXT:    [[EXTR0:%.*]] = extractelement <4 x float> [[VECLD]], i32 0
; SCALAR-NEXT:    [[EXTR1:%.*]] = extractelement <4 x float> [[VECLD]], i32 1
; SCALAR-NEXT:    store float [[EXTR1]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[EXTR0]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1

  %vecld = load <4 x float>, ptr %ptr
  %extr0 = extractelement <4 x float> %vecld, i32 0
  %extr1 = extractelement <4 x float> %vecld, i32 1
  store float %extr1, ptr %ptr0
  store float %extr0, ptr %ptr1
  ret void
}

define void @widen_extracts_with_shuffle_diff_vf_offset(ptr %ptr) {
; VECTOR-LABEL: define void @widen_extracts_with_shuffle_diff_vf_offset(
; VECTOR-SAME: ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[VECLD:%.*]] = load <4 x float>, ptr [[PTR]], align 16
; VECTOR-NEXT:    [[UNPACK:%.*]] = shufflevector <4 x float> [[VECLD]], <4 x float> poison, <2 x i32> <i32 1, i32 2>
; VECTOR-NEXT:    [[EXTR0:%.*]] = extractelement <4 x float> [[VECLD]], i32 1
; VECTOR-NEXT:    [[EXTR1:%.*]] = extractelement <4 x float> [[VECLD]], i32 2
; VECTOR-NEXT:    store <2 x float> [[UNPACK]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @widen_extracts_with_shuffle_diff_vf_offset(
; SCALAR-SAME: ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[VECLD:%.*]] = load <4 x float>, ptr [[PTR]], align 16
; SCALAR-NEXT:    [[EXTR0:%.*]] = extractelement <4 x float> [[VECLD]], i32 1
; SCALAR-NEXT:    [[EXTR1:%.*]] = extractelement <4 x float> [[VECLD]], i32 2
; SCALAR-NEXT:    store float [[EXTR0]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[EXTR1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1

  %vecld = load <4 x float>, ptr %ptr
  %extr0 = extractelement <4 x float> %vecld, i32 1
  %extr1 = extractelement <4 x float> %vecld, i32 2
  store float %extr0, ptr %ptr0
  store float %extr1, ptr %ptr1
  ret void
}

define void @widen_extracts_with_shuffle_diff_vf_offset_outoforder(ptr %ptr) {
; VECTOR-LABEL: define void @widen_extracts_with_shuffle_diff_vf_offset_outoforder(
; VECTOR-SAME: ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[VECLD:%.*]] = load <4 x float>, ptr [[PTR]], align 16
; VECTOR-NEXT:    [[EXTR0:%.*]] = extractelement <4 x float> [[VECLD]], i32 1
; VECTOR-NEXT:    [[EXTR1:%.*]] = extractelement <4 x float> [[VECLD]], i32 2
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <2 x float> poison, float [[EXTR1]], i64 0
; VECTOR-NEXT:    [[PACK1:%.*]] = insertelement <2 x float> [[PACK]], float [[EXTR0]], i64 1
; VECTOR-NEXT:    store <2 x float> [[PACK1]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @widen_extracts_with_shuffle_diff_vf_offset_outoforder(
; SCALAR-SAME: ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[VECLD:%.*]] = load <4 x float>, ptr [[PTR]], align 16
; SCALAR-NEXT:    [[EXTR0:%.*]] = extractelement <4 x float> [[VECLD]], i32 1
; SCALAR-NEXT:    [[EXTR1:%.*]] = extractelement <4 x float> [[VECLD]], i32 2
; SCALAR-NEXT:    store float [[EXTR1]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[EXTR0]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1

  %vecld = load <4 x float>, ptr %ptr
  %extr0 = extractelement <4 x float> %vecld, i32 1
  %extr1 = extractelement <4 x float> %vecld, i32 2
  store float %extr1, ptr %ptr0
  store float %extr0, ptr %ptr1
  ret void
}

define void @widen_extracts_with_shuffle_diff_vf_offset_gap(ptr %ptr) {
; VECTOR-LABEL: define void @widen_extracts_with_shuffle_diff_vf_offset_gap(
; VECTOR-SAME: ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[VECLD:%.*]] = load <4 x float>, ptr [[PTR]], align 16
; VECTOR-NEXT:    [[EXTR0:%.*]] = extractelement <4 x float> [[VECLD]], i32 1
; VECTOR-NEXT:    [[EXTR1:%.*]] = extractelement <4 x float> [[VECLD]], i32 3
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <2 x float> poison, float [[EXTR0]], i64 0
; VECTOR-NEXT:    [[PACK1:%.*]] = insertelement <2 x float> [[PACK]], float [[EXTR1]], i64 1
; VECTOR-NEXT:    store <2 x float> [[PACK1]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @widen_extracts_with_shuffle_diff_vf_offset_gap(
; SCALAR-SAME: ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[VECLD:%.*]] = load <4 x float>, ptr [[PTR]], align 16
; SCALAR-NEXT:    [[EXTR0:%.*]] = extractelement <4 x float> [[VECLD]], i32 1
; SCALAR-NEXT:    [[EXTR1:%.*]] = extractelement <4 x float> [[VECLD]], i32 3
; SCALAR-NEXT:    store float [[EXTR0]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[EXTR1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1

  %vecld = load <4 x float>, ptr %ptr
  %extr0 = extractelement <4 x float> %vecld, i32 1
  %extr1 = extractelement <4 x float> %vecld, i32 3
  store float %extr0, ptr %ptr0
  store float %extr1, ptr %ptr1
  ret void
}

define void @widen_extracts_with_shuffle_diff_vf_offset_gap_outoforder(ptr %ptr) {
; VECTOR-LABEL: define void @widen_extracts_with_shuffle_diff_vf_offset_gap_outoforder(
; VECTOR-SAME: ptr [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[VECLD:%.*]] = load <4 x float>, ptr [[PTR]], align 16
; VECTOR-NEXT:    [[EXTR0:%.*]] = extractelement <4 x float> [[VECLD]], i32 1
; VECTOR-NEXT:    [[EXTR1:%.*]] = extractelement <4 x float> [[VECLD]], i32 3
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <2 x float> poison, float [[EXTR1]], i64 0
; VECTOR-NEXT:    [[PACK1:%.*]] = insertelement <2 x float> [[PACK]], float [[EXTR0]], i64 1
; VECTOR-NEXT:    store <2 x float> [[PACK1]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @widen_extracts_with_shuffle_diff_vf_offset_gap_outoforder(
; SCALAR-SAME: ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[VECLD:%.*]] = load <4 x float>, ptr [[PTR]], align 16
; SCALAR-NEXT:    [[EXTR0:%.*]] = extractelement <4 x float> [[VECLD]], i32 1
; SCALAR-NEXT:    [[EXTR1:%.*]] = extractelement <4 x float> [[VECLD]], i32 3
; SCALAR-NEXT:    store float [[EXTR1]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[EXTR0]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1

  %vecld = load <4 x float>, ptr %ptr
  %extr0 = extractelement <4 x float> %vecld, i32 1
  %extr1 = extractelement <4 x float> %vecld, i32 3
  store float %extr1, ptr %ptr0
  store float %extr0, ptr %ptr1
  ret void
}

