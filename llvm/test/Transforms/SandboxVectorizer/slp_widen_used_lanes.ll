; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=128 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR

; This test checks that we don't crash when dealing with used seeds.
;
; The seeds should be:
;  (1) the stores
;  (2) the operands of %sub: (%add1, %add2)
; The first attempt will vectorize the stores and the rest of the tree
; including add1, which is marked as a "used" seed.
; The second attempt will try to vectorize from (%add1,%add2)
; but %add1 is used.
define void @used_seeds(ptr %ptr, double %val) {
; VECTOR-LABEL: define void @used_seeds(
; VECTOR-SAME: ptr [[PTR:%.*]], double [[VAL:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr double, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[PTR2:%.*]] = getelementptr double, ptr [[PTR]], i32 2
; VECTOR-NEXT:    [[LD2:%.*]] = load double, ptr [[PTR2]], align 8
; VECTOR-NEXT:    [[VECL:%.*]] = load <2 x double>, ptr [[PTR0]], align 8, !sb [[META0:![0-9]+]]
; VECTOR-NEXT:    [[ADD2:%.*]] = fadd double [[LD2]], [[LD2]]
; VECTOR-NEXT:    [[VEC:%.*]] = fadd <2 x double> [[VECL]], [[VECL]], !sb [[META0]]
; VECTOR-NEXT:    [[UNPACK:%.*]] = extractelement <2 x double> [[VEC]], i64 1, !sb [[META0]]
; VECTOR-NEXT:    [[SUB:%.*]] = fsub double [[UNPACK]], [[ADD2]]
; VECTOR-NEXT:    store <2 x double> [[VEC]], ptr [[PTR0]], align 8, !sb [[META0]]
; VECTOR-NEXT:    ret void
;
  %ptr0 = getelementptr double, ptr %ptr, i32 0
  %ptr1 = getelementptr double, ptr %ptr, i32 1
  %ptr2 = getelementptr double, ptr %ptr, i32 2
  %ld0 = load double, ptr %ptr0
  %ld1 = load double, ptr %ptr1
  %ld2 = load double, ptr %ptr2
  %add0 = fadd double %ld0, %ld0
  %add1 = fadd double %ld1, %ld1
  %add2 = fadd double %ld2, %ld2
  %sub = fsub double %add1, %add2
  store double %add0, ptr %ptr0
  store double %add1, ptr %ptr1
  ret void
}
;.
; VECTOR: [[META0]] = !{!"region", i32 0}
;.
