; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=256 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=BITS256
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=128 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=BITS128
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=64 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=BITS64
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=32 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=BITS32
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 %s -S | FileCheck %s --check-prefix=SCALAR

define void @vf_8xfloat(ptr %ptr) {
; BITS256-LABEL: define void @vf_8xfloat(
; BITS256-SAME: ptr [[PTR:%.*]]) {
; BITS256-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; BITS256-NEXT:    [[VECL:%.*]] = load <8 x float>, ptr [[PTR0]], align 4
; BITS256-NEXT:    store <8 x float> [[VECL]], ptr [[PTR0]], align 4
; BITS256-NEXT:    ret void
;
; BITS128-LABEL: define void @vf_8xfloat(
; BITS128-SAME: ptr [[PTR:%.*]]) {
; BITS128-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; BITS128-NEXT:    [[PTR4:%.*]] = getelementptr float, ptr [[PTR]], i32 4
; BITS128-NEXT:    [[VECL:%.*]] = load <4 x float>, ptr [[PTR0]], align 4
; BITS128-NEXT:    [[VECL1:%.*]] = load <4 x float>, ptr [[PTR4]], align 4
; BITS128-NEXT:    store <4 x float> [[VECL]], ptr [[PTR0]], align 4
; BITS128-NEXT:    store <4 x float> [[VECL1]], ptr [[PTR4]], align 4
; BITS128-NEXT:    ret void
;
; BITS64-LABEL: define void @vf_8xfloat(
; BITS64-SAME: ptr [[PTR:%.*]]) {
; BITS64-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; BITS64-NEXT:    [[PTR2:%.*]] = getelementptr float, ptr [[PTR]], i32 2
; BITS64-NEXT:    [[PTR4:%.*]] = getelementptr float, ptr [[PTR]], i32 4
; BITS64-NEXT:    [[PTR6:%.*]] = getelementptr float, ptr [[PTR]], i32 6
; BITS64-NEXT:    [[VECL:%.*]] = load <2 x float>, ptr [[PTR0]], align 4
; BITS64-NEXT:    [[VECL1:%.*]] = load <2 x float>, ptr [[PTR2]], align 4
; BITS64-NEXT:    [[VECL2:%.*]] = load <2 x float>, ptr [[PTR4]], align 4
; BITS64-NEXT:    [[VECL3:%.*]] = load <2 x float>, ptr [[PTR6]], align 4
; BITS64-NEXT:    store <2 x float> [[VECL]], ptr [[PTR0]], align 4
; BITS64-NEXT:    store <2 x float> [[VECL1]], ptr [[PTR2]], align 4
; BITS64-NEXT:    store <2 x float> [[VECL2]], ptr [[PTR4]], align 4
; BITS64-NEXT:    store <2 x float> [[VECL3]], ptr [[PTR6]], align 4
; BITS64-NEXT:    ret void
;
; BITS32-LABEL: define void @vf_8xfloat(
; BITS32-SAME: ptr [[PTR:%.*]]) {
; BITS32-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; BITS32-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; BITS32-NEXT:    [[PTR2:%.*]] = getelementptr float, ptr [[PTR]], i32 2
; BITS32-NEXT:    [[PTR3:%.*]] = getelementptr float, ptr [[PTR]], i32 3
; BITS32-NEXT:    [[PTR4:%.*]] = getelementptr float, ptr [[PTR]], i32 4
; BITS32-NEXT:    [[PTR5:%.*]] = getelementptr float, ptr [[PTR]], i32 5
; BITS32-NEXT:    [[PTR6:%.*]] = getelementptr float, ptr [[PTR]], i32 6
; BITS32-NEXT:    [[PTR7:%.*]] = getelementptr float, ptr [[PTR]], i32 7
; BITS32-NEXT:    [[LD0:%.*]] = load float, ptr [[PTR0]], align 4
; BITS32-NEXT:    [[LD1:%.*]] = load float, ptr [[PTR1]], align 4
; BITS32-NEXT:    [[LD2:%.*]] = load float, ptr [[PTR2]], align 4
; BITS32-NEXT:    [[LD3:%.*]] = load float, ptr [[PTR3]], align 4
; BITS32-NEXT:    [[LD4:%.*]] = load float, ptr [[PTR4]], align 4
; BITS32-NEXT:    [[LD5:%.*]] = load float, ptr [[PTR5]], align 4
; BITS32-NEXT:    [[LD6:%.*]] = load float, ptr [[PTR6]], align 4
; BITS32-NEXT:    [[LD7:%.*]] = load float, ptr [[PTR7]], align 4
; BITS32-NEXT:    store float [[LD0]], ptr [[PTR0]], align 4
; BITS32-NEXT:    store float [[LD1]], ptr [[PTR1]], align 4
; BITS32-NEXT:    store float [[LD2]], ptr [[PTR2]], align 4
; BITS32-NEXT:    store float [[LD3]], ptr [[PTR3]], align 4
; BITS32-NEXT:    store float [[LD4]], ptr [[PTR4]], align 4
; BITS32-NEXT:    store float [[LD5]], ptr [[PTR5]], align 4
; BITS32-NEXT:    store float [[LD6]], ptr [[PTR6]], align 4
; BITS32-NEXT:    store float [[LD7]], ptr [[PTR7]], align 4
; BITS32-NEXT:    ret void
;
; SCALAR-LABEL: define void @vf_8xfloat(
; SCALAR-SAME: ptr [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[PTR2:%.*]] = getelementptr float, ptr [[PTR]], i32 2
; SCALAR-NEXT:    [[PTR3:%.*]] = getelementptr float, ptr [[PTR]], i32 3
; SCALAR-NEXT:    [[PTR4:%.*]] = getelementptr float, ptr [[PTR]], i32 4
; SCALAR-NEXT:    [[PTR5:%.*]] = getelementptr float, ptr [[PTR]], i32 5
; SCALAR-NEXT:    [[PTR6:%.*]] = getelementptr float, ptr [[PTR]], i32 6
; SCALAR-NEXT:    [[PTR7:%.*]] = getelementptr float, ptr [[PTR]], i32 7
; SCALAR-NEXT:    [[LD0:%.*]] = load float, ptr [[PTR0]], align 4
; SCALAR-NEXT:    [[LD1:%.*]] = load float, ptr [[PTR1]], align 4
; SCALAR-NEXT:    [[LD2:%.*]] = load float, ptr [[PTR2]], align 4
; SCALAR-NEXT:    [[LD3:%.*]] = load float, ptr [[PTR3]], align 4
; SCALAR-NEXT:    [[LD4:%.*]] = load float, ptr [[PTR4]], align 4
; SCALAR-NEXT:    [[LD5:%.*]] = load float, ptr [[PTR5]], align 4
; SCALAR-NEXT:    [[LD6:%.*]] = load float, ptr [[PTR6]], align 4
; SCALAR-NEXT:    [[LD7:%.*]] = load float, ptr [[PTR7]], align 4
; SCALAR-NEXT:    store float [[LD0]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[LD1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    store float [[LD2]], ptr [[PTR2]], align 4
; SCALAR-NEXT:    store float [[LD3]], ptr [[PTR3]], align 4
; SCALAR-NEXT:    store float [[LD4]], ptr [[PTR4]], align 4
; SCALAR-NEXT:    store float [[LD5]], ptr [[PTR5]], align 4
; SCALAR-NEXT:    store float [[LD6]], ptr [[PTR6]], align 4
; SCALAR-NEXT:    store float [[LD7]], ptr [[PTR7]], align 4
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1
  %ptr2 = getelementptr float, ptr %ptr, i32 2
  %ptr3 = getelementptr float, ptr %ptr, i32 3
  %ptr4 = getelementptr float, ptr %ptr, i32 4
  %ptr5 = getelementptr float, ptr %ptr, i32 5
  %ptr6 = getelementptr float, ptr %ptr, i32 6
  %ptr7 = getelementptr float, ptr %ptr, i32 7
  %ld0 = load float, ptr %ptr0
  %ld1 = load float, ptr %ptr1
  %ld2 = load float, ptr %ptr2
  %ld3 = load float, ptr %ptr3
  %ld4 = load float, ptr %ptr4
  %ld5 = load float, ptr %ptr5
  %ld6 = load float, ptr %ptr6
  %ld7 = load float, ptr %ptr7
  store float %ld0, ptr %ptr0
  store float %ld1, ptr %ptr1
  store float %ld2, ptr %ptr2
  store float %ld3, ptr %ptr3
  store float %ld4, ptr %ptr4
  store float %ld5, ptr %ptr5
  store float %ld6, ptr %ptr6
  store float %ld7, ptr %ptr7
  ret void
}
