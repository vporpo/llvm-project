; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 %s -S | FileCheck %s --check-prefix=SCALAR

define void @widen_cast(ptr noalias %ptr) {
;
; VECTOR-LABEL: define void @widen_cast(
; VECTOR-SAME: ptr noalias [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[VECL:%.*]] = load <2 x float>, ptr [[PTR0]], align 4
; VECTOR-NEXT:    [[VCAST:%.*]] = fpext <2 x float> [[VECL]] to <2 x double>
; VECTOR-NEXT:    [[DPTR0:%.*]] = getelementptr double, ptr [[PTR]], i32 0
; VECTOR-NEXT:    store <2 x double> [[VCAST]], ptr [[DPTR0]], align 8
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @widen_cast(
; SCALAR-SAME: ptr noalias [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[LD0:%.*]] = load float, ptr [[PTR0]], align 4
; SCALAR-NEXT:    [[LD1:%.*]] = load float, ptr [[PTR1]], align 4
; SCALAR-NEXT:    [[EXT0:%.*]] = fpext float [[LD0]] to double
; SCALAR-NEXT:    [[EXT1:%.*]] = fpext float [[LD1]] to double
; SCALAR-NEXT:    [[DPTR0:%.*]] = getelementptr double, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[DPTR1:%.*]] = getelementptr double, ptr [[PTR]], i32 1
; SCALAR-NEXT:    store double [[EXT0]], ptr [[DPTR0]], align 8
; SCALAR-NEXT:    store double [[EXT1]], ptr [[DPTR1]], align 8
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1
  %ld0 = load float, ptr %ptr0
  %ld1 = load float, ptr %ptr1
  %ext0 = fpext float %ld0 to double
  %ext1 = fpext float %ld1 to double

  %dptr0 = getelementptr double, ptr %ptr, i32 0
  %dptr1 = getelementptr double, ptr %ptr, i32 1
  store double %ext0, ptr %dptr0
  store double %ext1, ptr %dptr1
  ret void
}


define void @widen_cast_diffent_types(ptr noalias %ptr, i16 %val0, i32 %val1) {
;
; VECTOR-LABEL: define void @widen_cast_diffent_types(
; VECTOR-SAME: ptr noalias [[PTR:%.*]], i16 [[VAL0:%.*]], i32 [[VAL1:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr i64, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[EXT0:%.*]] = zext i16 [[VAL0]] to i64
; VECTOR-NEXT:    [[EXT1:%.*]] = zext i32 [[VAL1]] to i64
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <2 x i64> poison, i64 [[EXT0]], i64 0
; VECTOR-NEXT:    [[PACK1:%.*]] = insertelement <2 x i64> [[PACK]], i64 [[EXT1]], i64 1
; VECTOR-NEXT:    store <2 x i64> [[PACK1]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @widen_cast_diffent_types(
; SCALAR-SAME: ptr noalias [[PTR:%.*]], i16 [[VAL0:%.*]], i32 [[VAL1:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr i64, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr i64, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[EXT0:%.*]] = zext i16 [[VAL0]] to i64
; SCALAR-NEXT:    [[EXT1:%.*]] = zext i32 [[VAL1]] to i64
; SCALAR-NEXT:    store i64 [[EXT0]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store i64 [[EXT1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr i64, ptr %ptr, i32 0
  %ptr1 = getelementptr i64, ptr %ptr, i32 1

  %ext0 = zext i16 %val0 to i64
  %ext1 = zext i32 %val1 to i64

  store i64 %ext0, ptr %ptr0
  store i64 %ext1, ptr %ptr1
  ret void
}
