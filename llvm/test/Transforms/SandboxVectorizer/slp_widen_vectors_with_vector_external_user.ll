; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 %s -S | FileCheck %s --check-prefix=SCALAR

define void @widen_vectors_with_vector_external_user(ptr %ptr, ptr %ptrX, ptr %ptrY) {
; VECTOR-LABEL: define void @widen_vectors_with_vector_external_user(
; VECTOR-SAME: ptr [[PTR:%.*]], ptr [[PTRX:%.*]], ptr [[PTRY:%.*]]) {
; VECTOR-NEXT:    [[GEP0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[VECL:%.*]] = load <4 x float>, ptr [[GEP0]], align 8
; VECTOR-NEXT:    [[VEC:%.*]] = fadd <4 x float> [[VECL]], <float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 1.000000e+00>
; VECTOR-NEXT:    [[UNPACK1:%.*]] = shufflevector <4 x float> [[VEC]], <4 x float> poison, <2 x i32> <i32 2, i32 3>
; VECTOR-NEXT:    [[UNPACK:%.*]] = shufflevector <4 x float> [[VEC]], <4 x float> poison, <2 x i32> <i32 0, i32 1>
; VECTOR-NEXT:    store <4 x float> [[VEC]], ptr [[GEP0]], align 8
; VECTOR-NEXT:    store <2 x float> [[UNPACK]], ptr [[PTRX]], align 8
; VECTOR-NEXT:    store <2 x float> [[UNPACK1]], ptr [[PTRY]], align 8
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @widen_vectors_with_vector_external_user(
; SCALAR-SAME: ptr [[PTR:%.*]], ptr [[PTRX:%.*]], ptr [[PTRY:%.*]]) {
; SCALAR-NEXT:    [[GEP0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[GEP1:%.*]] = getelementptr float, ptr [[PTR]], i32 2
; SCALAR-NEXT:    [[LD0:%.*]] = load <2 x float>, ptr [[GEP0]], align 8
; SCALAR-NEXT:    [[LD1:%.*]] = load <2 x float>, ptr [[GEP1]], align 8
; SCALAR-NEXT:    [[ADD0:%.*]] = fadd <2 x float> [[LD0]], zeroinitializer
; SCALAR-NEXT:    [[ADD1:%.*]] = fadd <2 x float> [[LD1]], <float 1.000000e+00, float 1.000000e+00>
; SCALAR-NEXT:    store <2 x float> [[ADD0]], ptr [[GEP0]], align 8
; SCALAR-NEXT:    store <2 x float> [[ADD1]], ptr [[GEP1]], align 8
; SCALAR-NEXT:    store <2 x float> [[ADD0]], ptr [[PTRX]], align 8
; SCALAR-NEXT:    store <2 x float> [[ADD1]], ptr [[PTRY]], align 8
; SCALAR-NEXT:    ret void
;
  %gep0 = getelementptr float, ptr %ptr, i32 0
  %gep1 = getelementptr float, ptr %ptr, i32 2
  %ld0 = load <2 x float>, ptr %gep0
  %ld1 = load <2 x float>, ptr %gep1
  %add0 = fadd <2 x float> %ld0, <float 0.0, float 0.0>
  %add1 = fadd <2 x float> %ld1, <float 1.0, float 1.0>
  store <2 x float> %add0, ptr %gep0
  store <2 x float> %add1, ptr %gep1

  store <2 x float> %add0, ptr %ptrX
  store <2 x float> %add1, ptr %ptrY
  ret void
}
