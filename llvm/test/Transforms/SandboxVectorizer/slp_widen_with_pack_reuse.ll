; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -passes=sandbox-vectorizer -sbvec-passes=boup-vectorize,vectorize-packs -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 %s -S | FileCheck %s --check-prefix=VECTOR
; RUN: opt -passes=sandbox-vectorizer -sbvec-passes=boup-vectorize,vectorize-packs -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=99999 %s -S | FileCheck %s --check-prefix=SCALAR
;
;   l0 0.0  l0 1.0
;    \ /     \ /
; l0  *  l0   *
;  \ /     \ /
;   -       -
;   |       |
;   S       S
; The pack can be reused while building a single vectorization DAG.
define void @widen_with_pack_reuse_same_dag(ptr noalias %ptr) {
; VECTOR-LABEL: define void @widen_with_pack_reuse_same_dag(
; VECTOR-SAME: ptr noalias [[PTR:%.*]]) {
; VECTOR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; VECTOR-NEXT:    [[LD0:%.*]] = load float, ptr [[PTR0]], align 4
; VECTOR-NEXT:    [[PACK2:%.*]] = insertelement <2 x float> poison, float [[LD0]], i64 0
; VECTOR-NEXT:    [[PACK3:%.*]] = insertelement <2 x float> [[PACK2]], float [[LD0]], i64 1
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <2 x float> poison, float [[LD0]], i64 0
; VECTOR-NEXT:    [[PACK1:%.*]] = insertelement <2 x float> [[PACK]], float [[LD0]], i64 1
; VECTOR-NEXT:    [[VEC:%.*]] = fmul <2 x float> [[PACK3]], <float 0.000000e+00, float 1.000000e+00>
; VECTOR-NEXT:    [[VEC4:%.*]] = fsub <2 x float> [[PACK1]], [[VEC]]
; VECTOR-NEXT:    store <2 x float> [[VEC4]], ptr [[PTR0]], align 4
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @widen_with_pack_reuse_same_dag(
; SCALAR-SAME: ptr noalias [[PTR:%.*]]) {
; SCALAR-NEXT:    [[PTR0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; SCALAR-NEXT:    [[PTR1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; SCALAR-NEXT:    [[LD0:%.*]] = load float, ptr [[PTR0]], align 4
; SCALAR-NEXT:    [[MUL0:%.*]] = fmul float [[LD0]], 0.000000e+00
; SCALAR-NEXT:    [[MUL1:%.*]] = fmul float [[LD0]], 1.000000e+00
; SCALAR-NEXT:    [[SUB0:%.*]] = fsub float [[LD0]], [[MUL0]]
; SCALAR-NEXT:    [[SUB1:%.*]] = fsub float [[LD0]], [[MUL1]]
; SCALAR-NEXT:    store float [[SUB0]], ptr [[PTR0]], align 4
; SCALAR-NEXT:    store float [[SUB1]], ptr [[PTR1]], align 4
; SCALAR-NEXT:    ret void
;
  %ptr0 = getelementptr float, ptr %ptr, i32 0
  %ptr1 = getelementptr float, ptr %ptr, i32 1

  %ld0 = load float, ptr %ptr0

  %mul0 = fmul float %ld0, 0.0
  %mul1 = fmul float %ld0, 1.0
  %sub0 = fsub float %ld0, %mul0
  %sub1 = fsub float %ld0, %mul1
  store float %sub0, ptr %ptr0
  store float %sub1, ptr %ptr1
  ret void
}

; The pack can be reused across different vectorization DAGs.
define void @widen_with_pack_reuse_diff_dag(ptr noalias %ptrA, ptr noalias %ptrB) {
; VECTOR-LABEL: define void @widen_with_pack_reuse_diff_dag(
; VECTOR-SAME: ptr noalias [[PTRA:%.*]], ptr noalias [[PTRB:%.*]]) {
; VECTOR-NEXT:    [[PTRA0:%.*]] = getelementptr float, ptr [[PTRA]], i32 0
; VECTOR-NEXT:    [[PTRB0:%.*]] = getelementptr float, ptr [[PTRB]], i32 0
; VECTOR-NEXT:    [[LD0:%.*]] = load float, ptr [[PTRA0]], align 4
; VECTOR-NEXT:    [[PACK2:%.*]] = insertelement <2 x float> poison, float [[LD0]], i64 0
; VECTOR-NEXT:    [[PACK3:%.*]] = insertelement <2 x float> [[PACK2]], float [[LD0]], i64 1
; VECTOR-NEXT:    [[PACK:%.*]] = insertelement <2 x float> poison, float [[LD0]], i64 0
; VECTOR-NEXT:    [[PACK1:%.*]] = insertelement <2 x float> [[PACK]], float [[LD0]], i64 1
; VECTOR-NEXT:    [[VEC:%.*]] = fsub <2 x float> [[PACK1]], <float 0.000000e+00, float 1.000000e+00>
; VECTOR-NEXT:    store <2 x float> [[VEC]], ptr [[PTRA0]], align 4
; VECTOR-NEXT:    [[VEC4:%.*]] = fsub <2 x float> [[PACK3]], <float 2.000000e+00, float 3.000000e+00>
; VECTOR-NEXT:    store <2 x float> [[VEC4]], ptr [[PTRB0]], align 4
; VECTOR-NEXT:    ret void
;
; SCALAR-LABEL: define void @widen_with_pack_reuse_diff_dag(
; SCALAR-SAME: ptr noalias [[PTRA:%.*]], ptr noalias [[PTRB:%.*]]) {
; SCALAR-NEXT:    [[PTRA0:%.*]] = getelementptr float, ptr [[PTRA]], i32 0
; SCALAR-NEXT:    [[PTRA1:%.*]] = getelementptr float, ptr [[PTRA]], i32 1
; SCALAR-NEXT:    [[PTRB0:%.*]] = getelementptr float, ptr [[PTRB]], i32 0
; SCALAR-NEXT:    [[PTRB1:%.*]] = getelementptr float, ptr [[PTRB]], i32 1
; SCALAR-NEXT:    [[LD0:%.*]] = load float, ptr [[PTRA0]], align 4
; SCALAR-NEXT:    [[SUB0:%.*]] = fsub float [[LD0]], 0.000000e+00
; SCALAR-NEXT:    [[SUB1:%.*]] = fsub float [[LD0]], 1.000000e+00
; SCALAR-NEXT:    store float [[SUB0]], ptr [[PTRA0]], align 4
; SCALAR-NEXT:    store float [[SUB1]], ptr [[PTRA1]], align 4
; SCALAR-NEXT:    [[SUB2:%.*]] = fsub float [[LD0]], 2.000000e+00
; SCALAR-NEXT:    [[SUB3:%.*]] = fsub float [[LD0]], 3.000000e+00
; SCALAR-NEXT:    store float [[SUB2]], ptr [[PTRB0]], align 4
; SCALAR-NEXT:    store float [[SUB3]], ptr [[PTRB1]], align 4
; SCALAR-NEXT:    ret void
;
  %ptrA0 = getelementptr float, ptr %ptrA, i32 0
  %ptrA1 = getelementptr float, ptr %ptrA, i32 1
  %ptrB0 = getelementptr float, ptr %ptrB, i32 0
  %ptrB1 = getelementptr float, ptr %ptrB, i32 1
  %ld0 = load float, ptr %ptrA0

  %sub0 = fsub float %ld0, 0.0
  %sub1 = fsub float %ld0, 1.0
  store float %sub0, ptr %ptrA0
  store float %sub1, ptr %ptrA1

  %sub2 = fsub float %ld0, 2.0
  %sub3 = fsub float %ld0, 3.0
  store float %sub2, ptr %ptrB0
  store float %sub3, ptr %ptrB1
  ret void
}
