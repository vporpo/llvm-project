; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -passes=sandbox-vectorizer -sbvec-passes=boup-vectorize,accept-or-revert -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 -sbvec-force-seeds=stores -sbvec-max-rec-limit=0 -sbvec-max-rec-limit-at=0 %s -S | FileCheck %s --check-prefix=L0AT0
; RUN: opt -passes=sandbox-vectorizer -sbvec-passes=boup-vectorize,accept-or-revert -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 -sbvec-force-seeds=stores -sbvec-max-rec-limit=1 -sbvec-max-rec-limit-at=0 %s -S | FileCheck %s --check-prefix=L1AT0
; RUN: opt -passes=sandbox-vectorizer -sbvec-passes=boup-vectorize,accept-or-revert -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 -sbvec-force-seeds=stores -sbvec-max-rec-limit=2 -sbvec-max-rec-limit-at=0 %s -S | FileCheck %s --check-prefix=L2AT0

; RUN: opt -passes=sandbox-vectorizer -sbvec-passes=boup-vectorize,accept-or-revert -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 -sbvec-force-seeds=stores -sbvec-max-rec-limit=0 -sbvec-max-rec-limit-at=1 %s -S | FileCheck %s --check-prefix=L0AT1
; RUN: opt -passes=sandbox-vectorizer -sbvec-passes=boup-vectorize,accept-or-revert -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 -sbvec-force-seeds=stores -sbvec-max-rec-limit=1 -sbvec-max-rec-limit-at=1 %s -S | FileCheck %s --check-prefix=L1AT1
; RUN: opt -passes=sandbox-vectorizer -sbvec-passes=boup-vectorize,accept-or-revert -sbvec-vec-reg-bits=512 -sbvec-cost-threshold=-9999 -sbvec-force-seeds=stores -sbvec-max-rec-limit=2 -sbvec-max-rec-limit-at=1 %s -S | FileCheck %s --check-prefix=L2AT1

; Checks the combination of: `-sbvec-max-rec-limit` and `-sbvec-max-rec-limit-a`

define void @max_rec_at(ptr %ptr) {
; L0AT0-LABEL: define void @max_rec_at(
; L0AT0-SAME: ptr [[PTR:%.*]]) {
; L0AT0-NEXT:  bbA:
; L0AT0-NEXT:    [[PTRA0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; L0AT0-NEXT:    [[VECL:%.*]] = load <2 x float>, ptr [[PTRA0]], align 4
; L0AT0-NEXT:    store <2 x float> [[VECL]], ptr [[PTRA0]], align 4
; L0AT0-NEXT:    br label [[BBB:%.*]]
; L0AT0:       bbB:
; L0AT0-NEXT:    [[PTRB0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; L0AT0-NEXT:    [[PTRB1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; L0AT0-NEXT:    [[LDB0:%.*]] = load float, ptr [[PTRB0]], align 4
; L0AT0-NEXT:    [[LDB1:%.*]] = load float, ptr [[PTRB1]], align 4
; L0AT0-NEXT:    store float [[LDB0]], ptr [[PTRB0]], align 4
; L0AT0-NEXT:    store float [[LDB1]], ptr [[PTRB1]], align 4
; L0AT0-NEXT:    ret void
;
; L1AT0-LABEL: define void @max_rec_at(
; L1AT0-SAME: ptr [[PTR:%.*]]) {
; L1AT0-NEXT:  bbA:
; L1AT0-NEXT:    [[PTRA0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; L1AT0-NEXT:    [[VECL:%.*]] = load <2 x float>, ptr [[PTRA0]], align 4
; L1AT0-NEXT:    store <2 x float> [[VECL]], ptr [[PTRA0]], align 4
; L1AT0-NEXT:    br label [[BBB:%.*]]
; L1AT0:       bbB:
; L1AT0-NEXT:    [[PTRB0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; L1AT0-NEXT:    [[PTRB1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; L1AT0-NEXT:    [[LDB0:%.*]] = load float, ptr [[PTRB0]], align 4
; L1AT0-NEXT:    [[LDB1:%.*]] = load float, ptr [[PTRB1]], align 4
; L1AT0-NEXT:    [[PACK:%.*]] = insertelement <2 x float> poison, float [[LDB0]], i64 0
; L1AT0-NEXT:    [[PACK1:%.*]] = insertelement <2 x float> [[PACK]], float [[LDB1]], i64 1
; L1AT0-NEXT:    store <2 x float> [[PACK1]], ptr [[PTRB0]], align 4
; L1AT0-NEXT:    ret void
;
; L2AT0-LABEL: define void @max_rec_at(
; L2AT0-SAME: ptr [[PTR:%.*]]) {
; L2AT0-NEXT:  bbA:
; L2AT0-NEXT:    [[PTRA0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; L2AT0-NEXT:    [[VECL1:%.*]] = load <2 x float>, ptr [[PTRA0]], align 4
; L2AT0-NEXT:    store <2 x float> [[VECL1]], ptr [[PTRA0]], align 4
; L2AT0-NEXT:    br label [[BBB:%.*]]
; L2AT0:       bbB:
; L2AT0-NEXT:    [[PTRB0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; L2AT0-NEXT:    [[VECL:%.*]] = load <2 x float>, ptr [[PTRB0]], align 4
; L2AT0-NEXT:    store <2 x float> [[VECL]], ptr [[PTRB0]], align 4
; L2AT0-NEXT:    ret void
;
; L0AT1-LABEL: define void @max_rec_at(
; L0AT1-SAME: ptr [[PTR:%.*]]) {
; L0AT1-NEXT:  bbA:
; L0AT1-NEXT:    [[PTRA0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; L0AT1-NEXT:    [[PTRA1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; L0AT1-NEXT:    [[LDA0:%.*]] = load float, ptr [[PTRA0]], align 4
; L0AT1-NEXT:    [[LDA1:%.*]] = load float, ptr [[PTRA1]], align 4
; L0AT1-NEXT:    store float [[LDA0]], ptr [[PTRA0]], align 4
; L0AT1-NEXT:    store float [[LDA1]], ptr [[PTRA1]], align 4
; L0AT1-NEXT:    br label [[BBB:%.*]]
; L0AT1:       bbB:
; L0AT1-NEXT:    [[PTRB0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; L0AT1-NEXT:    [[VECL:%.*]] = load <2 x float>, ptr [[PTRB0]], align 4
; L0AT1-NEXT:    store <2 x float> [[VECL]], ptr [[PTRB0]], align 4
; L0AT1-NEXT:    ret void
;
; L1AT1-LABEL: define void @max_rec_at(
; L1AT1-SAME: ptr [[PTR:%.*]]) {
; L1AT1-NEXT:  bbA:
; L1AT1-NEXT:    [[PTRA0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; L1AT1-NEXT:    [[PTRA1:%.*]] = getelementptr float, ptr [[PTR]], i32 1
; L1AT1-NEXT:    [[LDA0:%.*]] = load float, ptr [[PTRA0]], align 4
; L1AT1-NEXT:    [[LDA1:%.*]] = load float, ptr [[PTRA1]], align 4
; L1AT1-NEXT:    [[PACK:%.*]] = insertelement <2 x float> poison, float [[LDA0]], i64 0
; L1AT1-NEXT:    [[PACK1:%.*]] = insertelement <2 x float> [[PACK]], float [[LDA1]], i64 1
; L1AT1-NEXT:    store <2 x float> [[PACK1]], ptr [[PTRA0]], align 4
; L1AT1-NEXT:    br label [[BBB:%.*]]
; L1AT1:       bbB:
; L1AT1-NEXT:    [[PTRB0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; L1AT1-NEXT:    [[VECL:%.*]] = load <2 x float>, ptr [[PTRB0]], align 4
; L1AT1-NEXT:    store <2 x float> [[VECL]], ptr [[PTRB0]], align 4
; L1AT1-NEXT:    ret void
;
; L2AT1-LABEL: define void @max_rec_at(
; L2AT1-SAME: ptr [[PTR:%.*]]) {
; L2AT1-NEXT:  bbA:
; L2AT1-NEXT:    [[PTRA0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; L2AT1-NEXT:    [[VECL1:%.*]] = load <2 x float>, ptr [[PTRA0]], align 4
; L2AT1-NEXT:    store <2 x float> [[VECL1]], ptr [[PTRA0]], align 4
; L2AT1-NEXT:    br label [[BBB:%.*]]
; L2AT1:       bbB:
; L2AT1-NEXT:    [[PTRB0:%.*]] = getelementptr float, ptr [[PTR]], i32 0
; L2AT1-NEXT:    [[VECL:%.*]] = load <2 x float>, ptr [[PTRB0]], align 4
; L2AT1-NEXT:    store <2 x float> [[VECL]], ptr [[PTRB0]], align 4
; L2AT1-NEXT:    ret void
;
bbA:
  %ptrA0 = getelementptr float, ptr %ptr, i32 0
  %ptrA1 = getelementptr float, ptr %ptr, i32 1
  %ldA0 = load float, ptr %ptrA0
  %ldA1 = load float, ptr %ptrA1
  store float %ldA0, ptr %ptrA0
  store float %ldA1, ptr %ptrA1
  br label %bbB

bbB:
  %ptrB0 = getelementptr float, ptr %ptr, i32 0
  %ptrB1 = getelementptr float, ptr %ptr, i32 1
  %ldB0 = load float, ptr %ptrB0
  %ldB1 = load float, ptr %ptrB1
  store float %ldB0, ptr %ptrB0
  store float %ldB1, ptr %ptrB1
  ret void
}
